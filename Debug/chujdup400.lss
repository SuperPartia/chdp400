
chujdup400.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002bc  00800060  00002058  000020ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080031c  0080031c  000023a8  2**0
                  ALLOC
  3 .stab         00002604  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001347  00000000  00000000  000049ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005cf3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005d04  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_11>
      30:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 33       	cpi	r26, 0x33	; 51
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 01 	call	0x310	; 0x310 <main>
      8a:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adcInit>:
 *      Author: nkubiak
*/

#include "includes.h"
void adcInit()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0 | (1<<REFS0); //channel 0, Vref = Vcc
      9a:	87 e2       	ldi	r24, 0x27	; 39
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	20 e4       	ldi	r18, 0x40	; 64
      a0:	fc 01       	movw	r30, r24
      a2:	20 83       	st	Z, r18
	ADCSRA = (1<<ADEN); //| (1<<ADIE);
      a4:	86 e2       	ldi	r24, 0x26	; 38
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	20 e8       	ldi	r18, 0x80	; 128
      aa:	fc 01       	movw	r30, r24
      ac:	20 83       	st	Z, r18
	DDRC = 1 << analog_switch;
      ae:	84 e3       	ldi	r24, 0x34	; 52
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	fc 01       	movw	r30, r24
      b6:	20 83       	st	Z, r18
}
      b8:	df 91       	pop	r29
      ba:	cf 91       	pop	r28
      bc:	08 95       	ret

000000be <adcRead>:

unsigned int adcRead(_Bool channel)
{
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	1f 92       	push	r1
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	89 83       	std	Y+1, r24	; 0x01
	PORTC = channel<<analog_switch;
      ca:	85 e3       	ldi	r24, 0x35	; 53
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	29 81       	ldd	r18, Y+1	; 0x01
      d0:	22 0f       	add	r18, r18
      d2:	fc 01       	movw	r30, r24
      d4:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);
      d6:	86 e2       	ldi	r24, 0x26	; 38
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	26 e2       	ldi	r18, 0x26	; 38
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	20 64       	ori	r18, 0x40	; 64
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));
      e8:	00 00       	nop
      ea:	86 e2       	ldi	r24, 0x26	; 38
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	fc 01       	movw	r30, r24
      f0:	80 81       	ld	r24, Z
      f2:	88 2f       	mov	r24, r24
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	80 74       	andi	r24, 0x40	; 64
      f8:	99 27       	eor	r25, r25
      fa:	89 2b       	or	r24, r25
      fc:	b1 f7       	brne	.-20     	; 0xea <adcRead+0x2c>
	return ADC;
      fe:	84 e2       	ldi	r24, 0x24	; 36
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	fc 01       	movw	r30, r24
     104:	80 81       	ld	r24, Z
     106:	91 81       	ldd	r25, Z+1	; 0x01

}
     108:	0f 90       	pop	r0
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <doTheSwitching>:
#include "includes.h"
#define F_CPU 1000000

bool doTheSwitching (uint8_t *diode, uint8_t mode, uint8_t diodesCount, uint8_t receiversCount)
{
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	27 97       	sbiw	r28, 0x07	; 7
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	9a 83       	std	Y+2, r25	; 0x02
     126:	89 83       	std	Y+1, r24	; 0x01
     128:	6b 83       	std	Y+3, r22	; 0x03
     12a:	4c 83       	std	Y+4, r20	; 0x04
     12c:	2d 83       	std	Y+5, r18	; 0x05
	static uint8_t counter = 0;
	do
		*diode = (*diode + 1)%3; //0, 1, 2
     12e:	89 81       	ldd	r24, Y+1	; 0x01
     130:	9a 81       	ldd	r25, Y+2	; 0x02
     132:	fc 01       	movw	r30, r24
     134:	80 81       	ld	r24, Z
     136:	88 2f       	mov	r24, r24
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	01 96       	adiw	r24, 0x01	; 1
     13c:	23 e0       	ldi	r18, 0x03	; 3
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	b9 01       	movw	r22, r18
     142:	0e 94 5f 09 	call	0x12be	; 0x12be <__divmodhi4>
     146:	28 2f       	mov	r18, r24
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	9a 81       	ldd	r25, Y+2	; 0x02
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
	while (!((*diode+1) & mode)); //1, 2, 3
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	9a 81       	ldd	r25, Y+2	; 0x02
     154:	fc 01       	movw	r30, r24
     156:	80 81       	ld	r24, Z
     158:	88 2f       	mov	r24, r24
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	9c 01       	movw	r18, r24
     15e:	2f 5f       	subi	r18, 0xFF	; 255
     160:	3f 4f       	sbci	r19, 0xFF	; 255
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	88 2f       	mov	r24, r24
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	82 23       	and	r24, r18
     16a:	93 23       	and	r25, r19
     16c:	89 2b       	or	r24, r25
     16e:	f9 f2       	breq	.-66     	; 0x12e <doTheSwitching+0x1e>
	counter++;
     170:	80 91 1c 03 	lds	r24, 0x031C
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	80 93 1c 03 	sts	0x031C, r24
	//return !(counter = counter == diodesCount ? 0 : counter);
}
     17a:	27 96       	adiw	r28, 0x07	; 7
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <initAll>:
void initAll()
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62

	MCUCSR|= (1<<7);
     194:	84 e5       	ldi	r24, 0x54	; 84
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	24 e5       	ldi	r18, 0x54	; 84
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	f9 01       	movw	r30, r18
     19e:	20 81       	ld	r18, Z
     1a0:	20 68       	ori	r18, 0x80	; 128
     1a2:	fc 01       	movw	r30, r24
     1a4:	20 83       	st	Z, r18
	MCUCSR|= (1<<7);
     1a6:	84 e5       	ldi	r24, 0x54	; 84
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	24 e5       	ldi	r18, 0x54	; 84
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	f9 01       	movw	r30, r18
     1b0:	20 81       	ld	r18, Z
     1b2:	20 68       	ori	r18, 0x80	; 128
     1b4:	fc 01       	movw	r30, r24
     1b6:	20 83       	st	Z, r18
	sei();
     1b8:	78 94       	sei

	uartStart();
     1ba:	0e 94 13 09 	call	0x1226	; 0x1226 <uartStart>
	adcInit();
     1be:	0e 94 49 00 	call	0x92	; 0x92 <adcInit>

	DDRD = (1<<red) | (1<<green) | (1<<ir) | (1<<ind);
     1c2:	81 e3       	ldi	r24, 0x31	; 49
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	20 ef       	ldi	r18, 0xF0	; 240
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 83       	st	Z, r18
	initTimer0();
     1cc:	0e 94 0c 02 	call	0x418	; 0x418 <initTimer0>
	initTimer1(15624);
     1d0:	88 e0       	ldi	r24, 0x08	; 8
     1d2:	9d e3       	ldi	r25, 0x3D	; 61
     1d4:	0e 94 04 03 	call	0x608	; 0x608 <initTimer1>

}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	08 95       	ret

000001de <runConfig>:

void runConfig(uint16_t *samplingT, int *measurementTime, int *cooldownTime, uint8_t *mode, uint8_t *repeats)
{
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	2a 97       	sbiw	r28, 0x0a	; 10
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	9a 83       	std	Y+2, r25	; 0x02
     1f8:	89 83       	std	Y+1, r24	; 0x01
     1fa:	7c 83       	std	Y+4, r23	; 0x04
     1fc:	6b 83       	std	Y+3, r22	; 0x03
     1fe:	5e 83       	std	Y+6, r21	; 0x06
     200:	4d 83       	std	Y+5, r20	; 0x05
     202:	38 87       	std	Y+8, r19	; 0x08
     204:	2f 83       	std	Y+7, r18	; 0x07
     206:	1a 87       	std	Y+10, r17	; 0x0a
     208:	09 87       	std	Y+9, r16	; 0x09

	*samplingT = wait4input("sampling period (in ms): ");
     20a:	8a e6       	ldi	r24, 0x6A	; 106
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 20 09 	call	0x1240	; 0x1240 <wait4input>
     212:	dc 01       	movw	r26, r24
     214:	cb 01       	movw	r24, r22
     216:	9c 01       	movw	r18, r24
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	fc 01       	movw	r30, r24
     21e:	31 83       	std	Z+1, r19	; 0x01
     220:	20 83       	st	Z, r18
	*measurementTime = wait4input("measurementTime (in ms):");
     222:	84 e8       	ldi	r24, 0x84	; 132
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 20 09 	call	0x1240	; 0x1240 <wait4input>
     22a:	dc 01       	movw	r26, r24
     22c:	cb 01       	movw	r24, r22
     22e:	9c 01       	movw	r18, r24
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	9c 81       	ldd	r25, Y+4	; 0x04
     234:	fc 01       	movw	r30, r24
     236:	31 83       	std	Z+1, r19	; 0x01
     238:	20 83       	st	Z, r18
	*cooldownTime = wait4input("cooldownTime (in ms):");
     23a:	8d e9       	ldi	r24, 0x9D	; 157
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 20 09 	call	0x1240	; 0x1240 <wait4input>
     242:	dc 01       	movw	r26, r24
     244:	cb 01       	movw	r24, r22
     246:	9c 01       	movw	r18, r24
     248:	8d 81       	ldd	r24, Y+5	; 0x05
     24a:	9e 81       	ldd	r25, Y+6	; 0x06
     24c:	fc 01       	movw	r30, r24
     24e:	31 83       	std	Z+1, r19	; 0x01
     250:	20 83       	st	Z, r18

	displayString("mode bits:");
     252:	83 eb       	ldi	r24, 0xB3	; 179
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("0 - IR diode used");
     25a:	8e eb       	ldi	r24, 0xBE	; 190
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("1 - Red diode used");
     262:	80 ed       	ldi	r24, 0xD0	; 208
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("2 - Green diode used");
     26a:	83 ee       	ldi	r24, 0xE3	; 227
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("3 - D per sample/~period");
     272:	88 ef       	ldi	r24, 0xF8	; 248
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("4 - receiver 1 used:");
     27a:	81 e1       	ldi	r24, 0x11	; 17
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("5 - receiver 2 used:");
     282:	86 e2       	ldi	r24, 0x26	; 38
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("6 - R per diode/~period");
     28a:	8b e3       	ldi	r24, 0x3B	; 59
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	//30 - r, g, co probkr / jeden rec


	while(1)
	{
	*mode = wait4input("mode:");
     292:	83 e5       	ldi	r24, 0x53	; 83
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0e 94 20 09 	call	0x1240	; 0x1240 <wait4input>
     29a:	dc 01       	movw	r26, r24
     29c:	cb 01       	movw	r24, r22
     29e:	28 2f       	mov	r18, r24
     2a0:	8f 81       	ldd	r24, Y+7	; 0x07
     2a2:	98 85       	ldd	r25, Y+8	; 0x08
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18


	if ( (*mode & 7) //at least one diode
     2a8:	8f 81       	ldd	r24, Y+7	; 0x07
     2aa:	98 85       	ldd	r25, Y+8	; 0x08
     2ac:	fc 01       	movw	r30, r24
     2ae:	80 81       	ld	r24, Z
     2b0:	88 2f       	mov	r24, r24
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	87 70       	andi	r24, 0x07	; 7
     2b6:	99 27       	eor	r25, r25
     2b8:	89 2b       	or	r24, r25
     2ba:	59 f0       	breq	.+22     	; 0x2d2 <runConfig+0xf4>
			&& (*mode & 48) ) //at least one reciever
     2bc:	8f 81       	ldd	r24, Y+7	; 0x07
     2be:	98 85       	ldd	r25, Y+8	; 0x08
     2c0:	fc 01       	movw	r30, r24
     2c2:	80 81       	ld	r24, Z
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	80 73       	andi	r24, 0x30	; 48
     2ca:	99 27       	eor	r25, r25
     2cc:	89 2b       	or	r24, r25
     2ce:	09 f0       	breq	.+2      	; 0x2d2 <runConfig+0xf4>
		break;
     2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <runConfig+0x106>
	*mode = 0;
     2d2:	8f 81       	ldd	r24, Y+7	; 0x07
     2d4:	98 85       	ldd	r25, Y+8	; 0x08
     2d6:	fc 01       	movw	r30, r24
     2d8:	10 82       	st	Z, r1
	displayString("invalid mode...");
     2da:	89 e5       	ldi	r24, 0x59	; 89
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	}
     2e2:	d7 cf       	rjmp	.-82     	; 0x292 <runConfig+0xb4>
	*repeats = wait4input("repeats:");
     2e4:	89 e6       	ldi	r24, 0x69	; 105
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 20 09 	call	0x1240	; 0x1240 <wait4input>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	28 2f       	mov	r18, r24
     2f2:	89 85       	ldd	r24, Y+9	; 0x09
     2f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18

}
     2fa:	2a 96       	adiw	r28, 0x0a	; 10
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <main>:


int main(void)
{
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	2f 97       	sbiw	r28, 0x0f	; 15
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
	uint16_t samplingT = 0;
     328:	19 86       	std	Y+9, r1	; 0x09
     32a:	18 86       	std	Y+8, r1	; 0x08
	int measurementTime = 0;
     32c:	1b 86       	std	Y+11, r1	; 0x0b
     32e:	1a 86       	std	Y+10, r1	; 0x0a
	int cooldownTime = 0;
     330:	1d 86       	std	Y+13, r1	; 0x0d
     332:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t repeats = 0;
     334:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t mode = 0;
     336:	1f 86       	std	Y+15, r1	; 0x0f

	initAll();
     338:	0e 94 c6 00 	call	0x18c	; 0x18c <initAll>
	runConfig(&samplingT, &measurementTime, &cooldownTime, &mode, &repeats);
     33c:	fe 01       	movw	r30, r28
     33e:	3e 96       	adiw	r30, 0x0e	; 14
     340:	9e 01       	movw	r18, r28
     342:	21 5f       	subi	r18, 0xF1	; 241
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	ae 01       	movw	r20, r28
     348:	44 5f       	subi	r20, 0xF4	; 244
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	be 01       	movw	r22, r28
     34e:	66 5f       	subi	r22, 0xF6	; 246
     350:	7f 4f       	sbci	r23, 0xFF	; 255
     352:	ce 01       	movw	r24, r28
     354:	08 96       	adiw	r24, 0x08	; 8
     356:	8f 01       	movw	r16, r30
     358:	0e 94 ef 00 	call	0x1de	; 0x1de <runConfig>

	uint8_t diodesCount = (mode & (1<<0))&&1 + (mode & (1<<1))&&1 + (mode & (1<<2))&&1;
     35c:	8f 85       	ldd	r24, Y+15	; 0x0f
     35e:	88 2f       	mov	r24, r24
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	81 70       	andi	r24, 0x01	; 1
     364:	99 27       	eor	r25, r25
     366:	21 e0       	ldi	r18, 0x01	; 1
     368:	89 2b       	or	r24, r25
     36a:	09 f4       	brne	.+2      	; 0x36e <main+0x5e>
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	2a 83       	std	Y+2, r18	; 0x02
	bool diodesPerSample = mode & (1<<3);
     370:	8f 85       	ldd	r24, Y+15	; 0x0f
     372:	88 70       	andi	r24, 0x08	; 8
     374:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t receiversCount = (mode & (1<<4))&&1 + (mode & (1<<5))&&1;
     376:	8f 85       	ldd	r24, Y+15	; 0x0f
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	80 71       	andi	r24, 0x10	; 16
     37e:	99 27       	eor	r25, r25
     380:	21 e0       	ldi	r18, 0x01	; 1
     382:	89 2b       	or	r24, r25
     384:	09 f4       	brne	.+2      	; 0x388 <main+0x78>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	2c 83       	std	Y+4, r18	; 0x04
	bool receiversPerDiodes = mode & (1<<6);
     38a:	8f 85       	ldd	r24, Y+15	; 0x0f
     38c:	80 74       	andi	r24, 0x40	; 64
     38e:	8d 83       	std	Y+5, r24	; 0x05

	bool currentReciever = 0;
     390:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t diode = 0;
     392:	1f 82       	std	Y+7, r1	; 0x07
	bool lastDiode = false;
     394:	19 82       	std	Y+1, r1	; 0x01

	startTimer0(samplingT);
     396:	88 85       	ldd	r24, Y+8	; 0x08
     398:	99 85       	ldd	r25, Y+9	; 0x09
     39a:	0e 94 1c 02 	call	0x438	; 0x438 <startTimer0>
	startTimer1(measurementTime, cooldownTime);
     39e:	2c 85       	ldd	r18, Y+12	; 0x0c
     3a0:	3d 85       	ldd	r19, Y+13	; 0x0d
     3a2:	8a 85       	ldd	r24, Y+10	; 0x0a
     3a4:	9b 85       	ldd	r25, Y+11	; 0x0b
     3a6:	b9 01       	movw	r22, r18
     3a8:	0e 94 1d 03 	call	0x63a	; 0x63a <startTimer1>

	while(1) {
			if (!diodesPerSample)
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	88 23       	and	r24, r24
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <main+0xa6>
				{
				//doTheSwitching(&diode, mode, diodesCount, receiversCount);
				lastDiode = true;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	89 83       	std	Y+1, r24	; 0x01
				}
			while(!_working);
     3b6:	00 00       	nop
     3b8:	80 91 66 00 	lds	r24, 0x0066
     3bc:	88 23       	and	r24, r24
     3be:	e1 f3       	breq	.-8      	; 0x3b8 <main+0xa8>

			if (diodesPerSample)
			{
			//	lastDiode = doTheSwitching(&diode, mode, diodesCount, receiversCount);
			}
			while(!_samplingReady); //set in interrupt
     3c0:	00 00       	nop
     3c2:	80 91 1d 03 	lds	r24, 0x031D
     3c6:	88 23       	and	r24, r24
     3c8:	e1 f3       	breq	.-8      	; 0x3c2 <main+0xb2>
			_setup = true;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 1e 03 	sts	0x031E, r24
			PORTD = (1<<ir + diode); //ir + 0, 1, 2
     3d0:	82 e3       	ldi	r24, 0x32	; 50
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	2f 81       	ldd	r18, Y+7	; 0x07
     3d6:	22 2f       	mov	r18, r18
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	a9 01       	movw	r20, r18
     3dc:	4b 5f       	subi	r20, 0xFB	; 251
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <main+0xda>
     3e6:	22 0f       	add	r18, r18
     3e8:	33 1f       	adc	r19, r19
     3ea:	4a 95       	dec	r20
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <main+0xd6>
     3ee:	fc 01       	movw	r30, r24
     3f0:	20 83       	st	Z, r18
			sendData(adcRead(currentReciever), lastDiode);
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	9e 81       	ldd	r25, Y+6	; 0x06
     3f6:	99 23       	and	r25, r25
     3f8:	09 f4       	brne	.+2      	; 0x3fc <main+0xec>
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 5f 00 	call	0xbe	; 0xbe <adcRead>
     400:	69 81       	ldd	r22, Y+1	; 0x01
     402:	0e 94 3a 08 	call	0x1074	; 0x1074 <sendData>
			//displayInt(adcRead(currentReciever));
			PORTD = 0;
     406:	82 e3       	ldi	r24, 0x32	; 50
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	fc 01       	movw	r30, r24
     40c:	10 82       	st	Z, r1
			_samplingReady = false;
     40e:	10 92 1d 03 	sts	0x031D, r1
			_setup = false;
     412:	10 92 1e 03 	sts	0x031E, r1
	}
     416:	ca cf       	rjmp	.-108    	; 0x3ac <main+0x9c>

00000418 <initTimer0>:
volatile uint8_t cooldownCycles = 1;
volatile uint16_t coolOCR1A = 0;

//TIMER 0
void initTimer0()
{
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << TOIE0);
     420:	89 e5       	ldi	r24, 0x59	; 89
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	29 e5       	ldi	r18, 0x59	; 89
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	f9 01       	movw	r30, r18
     42a:	20 81       	ld	r18, Z
     42c:	21 60       	ori	r18, 0x01	; 1
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
	//Set interrupt on compare match
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <startTimer0>:

void startTimer0(uint16_t samplingT)
{
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	00 d0       	rcall	.+0      	; 0x43e <startTimer0+0x6>
     43e:	00 d0       	rcall	.+0      	; 0x440 <startTimer0+0x8>
     440:	00 d0       	rcall	.+0      	; 0x442 <startTimer0+0xa>
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	9e 83       	std	Y+6, r25	; 0x06
     448:	8d 83       	std	Y+5, r24	; 0x05
	//t = 1/frequ 100 us 500m
	//t = TCNT0*presc / 1 000 000  0,065536

	float t = samplingT;
     44a:	8d 81       	ldd	r24, Y+5	; 0x05
     44c:	9e 81       	ldd	r25, Y+6	; 0x06
     44e:	cc 01       	movw	r24, r24
     450:	a0 e0       	ldi	r26, 0x00	; 0
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__floatunsisf>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	89 83       	std	Y+1, r24	; 0x01
     462:	9a 83       	std	Y+2, r25	; 0x02
     464:	ab 83       	std	Y+3, r26	; 0x03
     466:	bc 83       	std	Y+4, r27	; 0x04
	while (floor(t) >= 262)
     468:	15 c0       	rjmp	.+42     	; 0x494 <__stack+0x35>
	{
		t -= 262.1;
     46a:	2d ec       	ldi	r18, 0xCD	; 205
     46c:	3c e0       	ldi	r19, 0x0C	; 12
     46e:	43 e8       	ldi	r20, 0x83	; 131
     470:	53 e4       	ldi	r21, 0x43	; 67
     472:	69 81       	ldd	r22, Y+1	; 0x01
     474:	7a 81       	ldd	r23, Y+2	; 0x02
     476:	8b 81       	ldd	r24, Y+3	; 0x03
     478:	9c 81       	ldd	r25, Y+4	; 0x04
     47a:	0e 94 87 09 	call	0x130e	; 0x130e <__subsf3>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	89 83       	std	Y+1, r24	; 0x01
     484:	9a 83       	std	Y+2, r25	; 0x02
     486:	ab 83       	std	Y+3, r26	; 0x03
     488:	bc 83       	std	Y+4, r27	; 0x04
		cycles++;
     48a:	80 91 1f 03 	lds	r24, 0x031F
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	80 93 1f 03 	sts	0x031F, r24
{
	//t = 1/frequ 100 us 500m
	//t = TCNT0*presc / 1 000 000  0,065536

	float t = samplingT;
	while (floor(t) >= 262)
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	ab 81       	ldd	r26, Y+3	; 0x03
     49a:	bc 81       	ldd	r27, Y+4	; 0x04
     49c:	bc 01       	movw	r22, r24
     49e:	cd 01       	movw	r24, r26
     4a0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <floor>
     4a4:	dc 01       	movw	r26, r24
     4a6:	cb 01       	movw	r24, r22
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	43 e8       	ldi	r20, 0x83	; 131
     4ae:	53 e4       	ldi	r21, 0x43	; 67
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__gesf2>
     4b8:	88 23       	and	r24, r24
     4ba:	bc f6       	brge	.-82     	; 0x46a <__stack+0xb>
	{
		t -= 262.1;
		cycles++;
	}
	sampleResid = floor(t*0xFF/262.1);
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	4f e7       	ldi	r20, 0x7F	; 127
     4c2:	53 e4       	ldi	r21, 0x43	; 67
     4c4:	69 81       	ldd	r22, Y+1	; 0x01
     4c6:	7a 81       	ldd	r23, Y+2	; 0x02
     4c8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ca:	9c 81       	ldd	r25, Y+4	; 0x04
     4cc:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__mulsf3>
     4d0:	dc 01       	movw	r26, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	2d ec       	ldi	r18, 0xCD	; 205
     4d6:	3c e0       	ldi	r19, 0x0C	; 12
     4d8:	43 e8       	ldi	r20, 0x83	; 131
     4da:	53 e4       	ldi	r21, 0x43	; 67
     4dc:	bc 01       	movw	r22, r24
     4de:	cd 01       	movw	r24, r26
     4e0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__divsf3>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	bc 01       	movw	r22, r24
     4ea:	cd 01       	movw	r24, r26
     4ec:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <floor>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	bc 01       	movw	r22, r24
     4f6:	cd 01       	movw	r24, r26
     4f8:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__fixunssfsi>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	80 93 2c 03 	sts	0x032C, r24
	//resid - t
	//256   - 262.1
	TCNT0 = 0xFF - sampleResid;
     504:	82 e5       	ldi	r24, 0x52	; 82
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	20 91 2c 03 	lds	r18, 0x032C
     50c:	20 95       	com	r18
     50e:	fc 01       	movw	r30, r24
     510:	20 83       	st	Z, r18
	TCCR0 |= 5; //0,262144
     512:	83 e5       	ldi	r24, 0x53	; 83
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	23 e5       	ldi	r18, 0x53	; 83
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	f9 01       	movw	r30, r18
     51c:	20 81       	ld	r18, Z
     51e:	25 60       	ori	r18, 0x05	; 5
     520:	fc 01       	movw	r30, r24
     522:	20 83       	st	Z, r18

}
     524:	26 96       	adiw	r28, 0x06	; 6
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <stopTimer0>:

uint16_t stopTimer0()
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~(1 << CS00) & ~(1 << CS01) & ~(1 << CS02);
     53e:	83 e5       	ldi	r24, 0x53	; 83
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	23 e5       	ldi	r18, 0x53	; 83
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	f9 01       	movw	r30, r18
     548:	20 81       	ld	r18, Z
     54a:	28 7f       	andi	r18, 0xF8	; 248
     54c:	fc 01       	movw	r30, r24
     54e:	20 83       	st	Z, r18
	return OCR1A;
     550:	8a e4       	ldi	r24, 0x4A	; 74
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	91 81       	ldd	r25, Z+1	; 0x01
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <__vector_9>:


ISR (TIMER0_OVF_vect)  // timer0 overflow interrupt
{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	00 90 5f 00 	lds	r0, 0x005F
     568:	0f 92       	push	r0
     56a:	11 24       	eor	r1, r1
     56c:	2f 93       	push	r18
     56e:	3f 93       	push	r19
     570:	4f 93       	push	r20
     572:	5f 93       	push	r21
     574:	6f 93       	push	r22
     576:	7f 93       	push	r23
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	af 93       	push	r26
     57e:	bf 93       	push	r27
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62

	static uint8_t subCounter = 0;
	if(subCounter == cycles)
     58c:	90 91 24 03 	lds	r25, 0x0324
     590:	80 91 1f 03 	lds	r24, 0x031F
     594:	98 17       	cp	r25, r24
     596:	f9 f4       	brne	.+62     	; 0x5d6 <__vector_9+0x76>
	{
		TCNT0 = 0xFF - sampleResid;
     598:	82 e5       	ldi	r24, 0x52	; 82
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	20 91 2c 03 	lds	r18, 0x032C
     5a0:	20 95       	com	r18
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
		subCounter = 0;
     5a6:	10 92 24 03 	sts	0x0324, r1
		if (_working == true)
     5aa:	80 91 66 00 	lds	r24, 0x0066
     5ae:	81 30       	cpi	r24, 0x01	; 1
     5b0:	89 f4       	brne	.+34     	; 0x5d4 <__vector_9+0x74>
		{
			if (_samplingReady == false && _setup == false)
     5b2:	80 91 1d 03 	lds	r24, 0x031D
     5b6:	88 23       	and	r24, r24
     5b8:	41 f4       	brne	.+16     	; 0x5ca <__vector_9+0x6a>
     5ba:	80 91 1e 03 	lds	r24, 0x031E
     5be:	88 23       	and	r24, r24
     5c0:	21 f4       	brne	.+8      	; 0x5ca <__vector_9+0x6a>
			{
				_samplingReady = true;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 1d 03 	sts	0x031D, r24
     5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__vector_9+0x74>
			}
			else
			{
				displayString("error!");
     5ca:	82 e7       	ldi	r24, 0x72	; 114
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
			}
		}
		return;
     5d2:	06 c0       	rjmp	.+12     	; 0x5e0 <__vector_9+0x80>
     5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <__vector_9+0x80>
	}
	subCounter ++;
     5d6:	80 91 24 03 	lds	r24, 0x0324
     5da:	8f 5f       	subi	r24, 0xFF	; 255
     5dc:	80 93 24 03 	sts	0x0324, r24
}
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	ff 91       	pop	r31
     5e6:	ef 91       	pop	r30
     5e8:	bf 91       	pop	r27
     5ea:	af 91       	pop	r26
     5ec:	9f 91       	pop	r25
     5ee:	8f 91       	pop	r24
     5f0:	7f 91       	pop	r23
     5f2:	6f 91       	pop	r22
     5f4:	5f 91       	pop	r21
     5f6:	4f 91       	pop	r20
     5f8:	3f 91       	pop	r19
     5fa:	2f 91       	pop	r18
     5fc:	0f 90       	pop	r0
     5fe:	00 92 5f 00 	sts	0x005F, r0
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <initTimer1>:

//TIMER 1

void initTimer1()
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1 << WGM12);
     610:	8e e4       	ldi	r24, 0x4E	; 78
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	2e e4       	ldi	r18, 0x4E	; 78
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	f9 01       	movw	r30, r18
     61a:	20 81       	ld	r18, Z
     61c:	28 60       	ori	r18, 0x08	; 8
     61e:	fc 01       	movw	r30, r24
     620:	20 83       	st	Z, r18
	// Mode 4, CTC on OCR1A
	TIMSK |= (1 << OCIE1A);
     622:	89 e5       	ldi	r24, 0x59	; 89
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	29 e5       	ldi	r18, 0x59	; 89
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	f9 01       	movw	r30, r18
     62c:	20 81       	ld	r18, Z
     62e:	20 61       	ori	r18, 0x10	; 16
     630:	fc 01       	movw	r30, r24
     632:	20 83       	st	Z, r18
	//Set interrupt on compare match
}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <startTimer1>:

void startTimer1(int measurementT, int cooldownT)
{
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	28 97       	sbiw	r28, 0x08	; 8
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	9e 83       	std	Y+6, r25	; 0x06
     654:	8d 83       	std	Y+5, r24	; 0x05
     656:	78 87       	std	Y+8, r23	; 0x08
     658:	6f 83       	std	Y+7, r22	; 0x07
	float T = measurementT;
     65a:	8d 81       	ldd	r24, Y+5	; 0x05
     65c:	9e 81       	ldd	r25, Y+6	; 0x06
     65e:	09 2e       	mov	r0, r25
     660:	00 0c       	add	r0, r0
     662:	aa 0b       	sbc	r26, r26
     664:	bb 0b       	sbc	r27, r27
     666:	bc 01       	movw	r22, r24
     668:	cd 01       	movw	r24, r26
     66a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__floatsisf>
     66e:	dc 01       	movw	r26, r24
     670:	cb 01       	movw	r24, r22
     672:	89 83       	std	Y+1, r24	; 0x01
     674:	9a 83       	std	Y+2, r25	; 0x02
     676:	ab 83       	std	Y+3, r26	; 0x03
     678:	bc 83       	std	Y+4, r27	; 0x04
	while (floor(T) >= 4194)
     67a:	15 c0       	rjmp	.+42     	; 0x6a6 <startTimer1+0x6c>
	{
		T /= 2;
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	50 e4       	ldi	r21, 0x40	; 64
     684:	69 81       	ldd	r22, Y+1	; 0x01
     686:	7a 81       	ldd	r23, Y+2	; 0x02
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__divsf3>
     690:	dc 01       	movw	r26, r24
     692:	cb 01       	movw	r24, r22
     694:	89 83       	std	Y+1, r24	; 0x01
     696:	9a 83       	std	Y+2, r25	; 0x02
     698:	ab 83       	std	Y+3, r26	; 0x03
     69a:	bc 83       	std	Y+4, r27	; 0x04
		measureCycles *= 2;
     69c:	80 91 67 00 	lds	r24, 0x0067
     6a0:	88 0f       	add	r24, r24
     6a2:	80 93 67 00 	sts	0x0067, r24
}

void startTimer1(int measurementT, int cooldownT)
{
	float T = measurementT;
	while (floor(T) >= 4194)
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	9a 81       	ldd	r25, Y+2	; 0x02
     6aa:	ab 81       	ldd	r26, Y+3	; 0x03
     6ac:	bc 81       	ldd	r27, Y+4	; 0x04
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <floor>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e1       	ldi	r19, 0x10	; 16
     6be:	43 e8       	ldi	r20, 0x83	; 131
     6c0:	55 e4       	ldi	r21, 0x45	; 69
     6c2:	bc 01       	movw	r22, r24
     6c4:	cd 01       	movw	r24, r26
     6c6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__gesf2>
     6ca:	88 23       	and	r24, r24
     6cc:	bc f6       	brge	.-82     	; 0x67c <startTimer1+0x42>
	{
		T /= 2;
		measureCycles *= 2;
	}
	T /= 4194.5;
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	34 e1       	ldi	r19, 0x14	; 20
     6d2:	43 e8       	ldi	r20, 0x83	; 131
     6d4:	55 e4       	ldi	r21, 0x45	; 69
     6d6:	69 81       	ldd	r22, Y+1	; 0x01
     6d8:	7a 81       	ldd	r23, Y+2	; 0x02
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	9c 81       	ldd	r25, Y+4	; 0x04
     6de:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__divsf3>
     6e2:	dc 01       	movw	r26, r24
     6e4:	cb 01       	movw	r24, r22
     6e6:	89 83       	std	Y+1, r24	; 0x01
     6e8:	9a 83       	std	Y+2, r25	; 0x02
     6ea:	ab 83       	std	Y+3, r26	; 0x03
     6ec:	bc 83       	std	Y+4, r27	; 0x04
	measOCR1A = T*0xFFFF;
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	3f ef       	ldi	r19, 0xFF	; 255
     6f2:	4f e7       	ldi	r20, 0x7F	; 127
     6f4:	57 e4       	ldi	r21, 0x47	; 71
     6f6:	69 81       	ldd	r22, Y+1	; 0x01
     6f8:	7a 81       	ldd	r23, Y+2	; 0x02
     6fa:	8b 81       	ldd	r24, Y+3	; 0x03
     6fc:	9c 81       	ldd	r25, Y+4	; 0x04
     6fe:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__mulsf3>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	bc 01       	movw	r22, r24
     708:	cd 01       	movw	r24, r26
     70a:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__fixunssfsi>
     70e:	dc 01       	movw	r26, r24
     710:	cb 01       	movw	r24, r22
     712:	90 93 21 03 	sts	0x0321, r25
     716:	80 93 20 03 	sts	0x0320, r24
	T = cooldownT;
     71a:	8f 81       	ldd	r24, Y+7	; 0x07
     71c:	98 85       	ldd	r25, Y+8	; 0x08
     71e:	09 2e       	mov	r0, r25
     720:	00 0c       	add	r0, r0
     722:	aa 0b       	sbc	r26, r26
     724:	bb 0b       	sbc	r27, r27
     726:	bc 01       	movw	r22, r24
     728:	cd 01       	movw	r24, r26
     72a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__floatsisf>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	ab 83       	std	Y+3, r26	; 0x03
     738:	bc 83       	std	Y+4, r27	; 0x04
	while (floor(T) >= 4194)
     73a:	15 c0       	rjmp	.+42     	; 0x766 <startTimer1+0x12c>
	{
		T /= 2;
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	50 e4       	ldi	r21, 0x40	; 64
     744:	69 81       	ldd	r22, Y+1	; 0x01
     746:	7a 81       	ldd	r23, Y+2	; 0x02
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	9c 81       	ldd	r25, Y+4	; 0x04
     74c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__divsf3>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	9a 83       	std	Y+2, r25	; 0x02
     758:	ab 83       	std	Y+3, r26	; 0x03
     75a:	bc 83       	std	Y+4, r27	; 0x04
		cooldownCycles *= 2;
     75c:	80 91 68 00 	lds	r24, 0x0068
     760:	88 0f       	add	r24, r24
     762:	80 93 68 00 	sts	0x0068, r24
		measureCycles *= 2;
	}
	T /= 4194.5;
	measOCR1A = T*0xFFFF;
	T = cooldownT;
	while (floor(T) >= 4194)
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	ab 81       	ldd	r26, Y+3	; 0x03
     76c:	bc 81       	ldd	r27, Y+4	; 0x04
     76e:	bc 01       	movw	r22, r24
     770:	cd 01       	movw	r24, r26
     772:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <floor>
     776:	dc 01       	movw	r26, r24
     778:	cb 01       	movw	r24, r22
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e1       	ldi	r19, 0x10	; 16
     77e:	43 e8       	ldi	r20, 0x83	; 131
     780:	55 e4       	ldi	r21, 0x45	; 69
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__gesf2>
     78a:	88 23       	and	r24, r24
     78c:	bc f6       	brge	.-82     	; 0x73c <startTimer1+0x102>
	{
		T /= 2;
		cooldownCycles *= 2;
	}
	T /= 4194.5;
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	34 e1       	ldi	r19, 0x14	; 20
     792:	43 e8       	ldi	r20, 0x83	; 131
     794:	55 e4       	ldi	r21, 0x45	; 69
     796:	69 81       	ldd	r22, Y+1	; 0x01
     798:	7a 81       	ldd	r23, Y+2	; 0x02
     79a:	8b 81       	ldd	r24, Y+3	; 0x03
     79c:	9c 81       	ldd	r25, Y+4	; 0x04
     79e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__divsf3>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	9a 83       	std	Y+2, r25	; 0x02
     7aa:	ab 83       	std	Y+3, r26	; 0x03
     7ac:	bc 83       	std	Y+4, r27	; 0x04
	coolOCR1A = T * 0xFFFF;
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	3f ef       	ldi	r19, 0xFF	; 255
     7b2:	4f e7       	ldi	r20, 0x7F	; 127
     7b4:	57 e4       	ldi	r21, 0x47	; 71
     7b6:	69 81       	ldd	r22, Y+1	; 0x01
     7b8:	7a 81       	ldd	r23, Y+2	; 0x02
     7ba:	8b 81       	ldd	r24, Y+3	; 0x03
     7bc:	9c 81       	ldd	r25, Y+4	; 0x04
     7be:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__mulsf3>
     7c2:	dc 01       	movw	r26, r24
     7c4:	cb 01       	movw	r24, r22
     7c6:	bc 01       	movw	r22, r24
     7c8:	cd 01       	movw	r24, r26
     7ca:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__fixunssfsi>
     7ce:	dc 01       	movw	r26, r24
     7d0:	cb 01       	movw	r24, r22
     7d2:	90 93 23 03 	sts	0x0323, r25
     7d6:	80 93 22 03 	sts	0x0322, r24

	OCR1A = floor(measOCR1A); //15624 for 1s
     7da:	0a e4       	ldi	r16, 0x4A	; 74
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	80 91 20 03 	lds	r24, 0x0320
     7e2:	90 91 21 03 	lds	r25, 0x0321
     7e6:	cc 01       	movw	r24, r24
     7e8:	a0 e0       	ldi	r26, 0x00	; 0
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	bc 01       	movw	r22, r24
     7ee:	cd 01       	movw	r24, r26
     7f0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__floatunsisf>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	bc 01       	movw	r22, r24
     7fa:	cd 01       	movw	r24, r26
     7fc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <floor>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	f8 01       	movw	r30, r16
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
	TCCR1B |= 3;
     816:	8e e4       	ldi	r24, 0x4E	; 78
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	2e e4       	ldi	r18, 0x4E	; 78
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	f9 01       	movw	r30, r18
     820:	20 81       	ld	r18, Z
     822:	23 60       	ori	r18, 0x03	; 3
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18
}
     828:	28 96       	adiw	r28, 0x08	; 8
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	08 95       	ret

0000083e <stopTimer1>:

uint16_t stopTimer1()
{
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS12) & ~(1 << CS10) & ~(1 << CS11);
     846:	8e e4       	ldi	r24, 0x4E	; 78
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	2e e4       	ldi	r18, 0x4E	; 78
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	f9 01       	movw	r30, r18
     850:	20 81       	ld	r18, Z
     852:	28 7f       	andi	r18, 0xF8	; 248
     854:	fc 01       	movw	r30, r24
     856:	20 83       	st	Z, r18
	return OCR1A;
     858:	8a e4       	ldi	r24, 0x4A	; 74
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	fc 01       	movw	r30, r24
     85e:	80 81       	ld	r24, Z
     860:	91 81       	ldd	r25, Z+1	; 0x01
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <__vector_6>:

ISR (TIMER1_COMPA_vect)
{
     868:	1f 92       	push	r1
     86a:	0f 92       	push	r0
     86c:	00 90 5f 00 	lds	r0, 0x005F
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	2f 93       	push	r18
     876:	3f 93       	push	r19
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	ef 93       	push	r30
     87e:	ff 93       	push	r31
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
	static uint8_t subCounter1 = 1;
	if((_working && (subCounter1 == measureCycles)) || (!_working && (subCounter1 == cooldownCycles)))
     888:	80 91 66 00 	lds	r24, 0x0066
     88c:	88 23       	and	r24, r24
     88e:	31 f0       	breq	.+12     	; 0x89c <__vector_6+0x34>
     890:	90 91 69 00 	lds	r25, 0x0069
     894:	80 91 67 00 	lds	r24, 0x0067
     898:	98 17       	cp	r25, r24
     89a:	51 f0       	breq	.+20     	; 0x8b0 <__vector_6+0x48>
     89c:	80 91 66 00 	lds	r24, 0x0066
     8a0:	88 23       	and	r24, r24
     8a2:	29 f5       	brne	.+74     	; 0x8ee <__vector_6+0x86>
     8a4:	90 91 69 00 	lds	r25, 0x0069
     8a8:	80 91 68 00 	lds	r24, 0x0068
     8ac:	98 17       	cp	r25, r24
     8ae:	f9 f4       	brne	.+62     	; 0x8ee <__vector_6+0x86>
	{

		_samplingReady = true;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	80 93 1d 03 	sts	0x031D, r24
		subCounter1 = 1;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 69 00 	sts	0x0069, r24
		_working ^= 1;
     8bc:	90 91 66 00 	lds	r25, 0x0066
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	89 27       	eor	r24, r25
     8c4:	80 93 66 00 	sts	0x0066, r24
		OCR1A = _working ? measOCR1A : coolOCR1A;
     8c8:	2a e4       	ldi	r18, 0x4A	; 74
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	80 91 66 00 	lds	r24, 0x0066
     8d0:	88 23       	and	r24, r24
     8d2:	29 f0       	breq	.+10     	; 0x8de <__vector_6+0x76>
     8d4:	80 91 20 03 	lds	r24, 0x0320
     8d8:	90 91 21 03 	lds	r25, 0x0321
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__vector_6+0x7e>
     8de:	80 91 22 03 	lds	r24, 0x0322
     8e2:	90 91 23 03 	lds	r25, 0x0323
     8e6:	f9 01       	movw	r30, r18
     8e8:	91 83       	std	Z+1, r25	; 0x01
     8ea:	80 83       	st	Z, r24
		return;
     8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <__vector_6+0x90>
	}
	subCounter1 ++;
     8ee:	80 91 69 00 	lds	r24, 0x0069
     8f2:	8f 5f       	subi	r24, 0xFF	; 255
     8f4:	80 93 69 00 	sts	0x0069, r24
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	ff 91       	pop	r31
     8fe:	ef 91       	pop	r30
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	00 92 5f 00 	sts	0x005F, r0
     90e:	0f 90       	pop	r0
     910:	1f 90       	pop	r1
     912:	18 95       	reti

00000914 <twiStart>:


#include "includes.h"

void twiStart(void)
{
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
TWCR = ((1<<TWINT) | (1<<TWEN) | (1<<TWSTA)); //START CONDITION
     91c:	86 e5       	ldi	r24, 0x56	; 86
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	24 ea       	ldi	r18, 0xA4	; 164
     922:	fc 01       	movw	r30, r24
     924:	20 83       	st	Z, r18
while (!(TWCR & (1<<TWINT))); // Wait for TWINT Flag set. This indicates that the START condition has been transmitted
     926:	00 00       	nop
     928:	86 e5       	ldi	r24, 0x56	; 86
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	fc 01       	movw	r30, r24
     92e:	80 81       	ld	r24, Z
     930:	88 23       	and	r24, r24
     932:	d4 f7       	brge	.-12     	; 0x928 <twiStart+0x14>

}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <twiStop>:

void twiStop(void)
{
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);  //STOP CONDITION
     942:	86 e5       	ldi	r24, 0x56	; 86
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	24 e9       	ldi	r18, 0x94	; 148
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <twiWrite>:

void twiWrite(char data)
{
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	1f 92       	push	r1
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	89 83       	std	Y+1, r24	; 0x01
TWDR = data; //write data
     95e:	83 e2       	ldi	r24, 0x23	; 35
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	29 81       	ldd	r18, Y+1	; 0x01
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18
TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of data
     968:	86 e5       	ldi	r24, 0x56	; 86
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	24 e8       	ldi	r18, 0x84	; 132
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18


while (!(TWCR & (1<<TWINT))); //Wait for TWINT Flag set. This indicates that data has been transmitted, and ACK/NACK has been received.
     972:	00 00       	nop
     974:	86 e5       	ldi	r24, 0x56	; 86
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	fc 01       	movw	r30, r24
     97a:	80 81       	ld	r24, Z
     97c:	88 23       	and	r24, r24
     97e:	d4 f7       	brge	.-12     	; 0x974 <twiWrite+0x22>

}
     980:	0f 90       	pop	r0
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <twiRead>:

char twiRead(char ack)
{
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	1f 92       	push	r1
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	89 83       	std	Y+1, r24	; 0x01
TWCR = ack ? ((1 << TWINT) | (1 << TWEN) | (1 << TWEA)) : ((1 << TWINT) | (1 << TWEN)) ;
     994:	86 e5       	ldi	r24, 0x56	; 86
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	29 81       	ldd	r18, Y+1	; 0x01
     99a:	22 23       	and	r18, r18
     99c:	11 f0       	breq	.+4      	; 0x9a2 <twiRead+0x1a>
     99e:	24 ec       	ldi	r18, 0xC4	; 196
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <twiRead+0x1c>
     9a2:	24 e8       	ldi	r18, 0x84	; 132
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 83       	st	Z, r18
while (!(TWCR & (1<<TWINT)));
     9a8:	00 00       	nop
     9aa:	86 e5       	ldi	r24, 0x56	; 86
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	fc 01       	movw	r30, r24
     9b0:	80 81       	ld	r24, Z
     9b2:	88 23       	and	r24, r24
     9b4:	d4 f7       	brge	.-12     	; 0x9aa <twiRead+0x22>
return TWDR;
     9b6:	83 e2       	ldi	r24, 0x23	; 35
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	fc 01       	movw	r30, r24
     9bc:	80 81       	ld	r24, Z
}
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <twiSendData>:

void twiSendData(char data, char regAddress)
{
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <twiSendData+0x6>
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	6a 83       	std	Y+2, r22	; 0x02
	//unsigned int length = strlen(data);

	twiStart();
     9d4:	0e 94 8a 04 	call	0x914	; 0x914 <twiStart>
	twiWrite(writeAddr); //send device adress
     9d8:	8d e1       	ldi	r24, 0x1D	; 29
     9da:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>
	twiWrite(regAddress); //send register address
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>

	//unsigned char z;
	//for(z=0; z<length; z++)
	//{
		twiWrite(data);
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>
	//}
	twiWrite(data);
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>
	twiStop();
     9f0:	0e 94 9d 04 	call	0x93a	; 0x93a <twiStop>
}
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <twiGetData>:

char twiGetData(char regAddress)
{
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	1f 92       	push	r1
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	89 83       	std	Y+1, r24	; 0x01
	twiStart();
     a0a:	0e 94 8a 04 	call	0x914	; 0x914 <twiStart>
	displayString("1. status po start:");
     a0e:	89 e7       	ldi	r24, 0x79	; 121
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayInt((TWSR & 0xF8));
     a16:	81 e2       	ldi	r24, 0x21	; 33
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	fc 01       	movw	r30, r24
     a1c:	80 81       	ld	r24, Z
     a1e:	88 2f       	mov	r24, r24
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	88 7f       	andi	r24, 0xF8	; 248
     a24:	99 27       	eor	r25, r25
     a26:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>

	twiWrite(writeAddr); //send device addres for writing
     a2a:	8d e1       	ldi	r24, 0x1D	; 29
     a2c:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>
	displayString("2. status po writeAddr:");
     a30:	8d e8       	ldi	r24, 0x8D	; 141
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayInt((TWSR & 0xF8));
     a38:	81 e2       	ldi	r24, 0x21	; 33
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	fc 01       	movw	r30, r24
     a3e:	80 81       	ld	r24, Z
     a40:	88 2f       	mov	r24, r24
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	88 7f       	andi	r24, 0xF8	; 248
     a46:	99 27       	eor	r25, r25
     a48:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>

	twiWrite(regAddress); //send register address
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>

	displayString("3. status po regAddr:");
     a52:	85 ea       	ldi	r24, 0xA5	; 165
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayInt((TWSR & 0xF8));
     a5a:	81 e2       	ldi	r24, 0x21	; 33
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	fc 01       	movw	r30, r24
     a60:	80 81       	ld	r24, Z
     a62:	88 2f       	mov	r24, r24
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	88 7f       	andi	r24, 0xF8	; 248
     a68:	99 27       	eor	r25, r25
     a6a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>

	twiWrite(readAddr); //send device address for reading
     a6e:	8d e9       	ldi	r24, 0x9D	; 157
     a70:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>

	displayString("4. status po readAddr:");
     a74:	8b eb       	ldi	r24, 0xBB	; 187
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayInt((TWSR & 0xF8));
     a7c:	81 e2       	ldi	r24, 0x21	; 33
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	88 7f       	andi	r24, 0xF8	; 248
     a8a:	99 27       	eor	r25, r25
     a8c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>


	displayString("udalo sie kurwa!");
     a90:	82 ed       	ldi	r24, 0xD2	; 210
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("wartosc:");
     a98:	83 ee       	ldi	r24, 0xE3	; 227
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	return twiRead(1);
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 c4 04 	call	0x988	; 0x988 <twiRead>

}
     aa6:	0f 90       	pop	r0
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <test>:


char test()
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	64 97       	sbiw	r28, 0x14	; 20
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
     ac2:	1a 82       	std	Y+2, r1	; 0x02
     ac4:	19 82       	std	Y+1, r1	; 0x01

	displayString("try adresy z zakresu 0-FF:");
     ac6:	8c ee       	ldi	r24, 0xEC	; 236
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString(".");
     ace:	87 e0       	ldi	r24, 0x07	; 7
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	aa ef       	ldi	r26, 0xFA	; 250
     adc:	b4 e4       	ldi	r27, 0x44	; 68
     ade:	8f 83       	std	Y+7, r24	; 0x07
     ae0:	98 87       	std	Y+8, r25	; 0x08
     ae2:	a9 87       	std	Y+9, r26	; 0x09
     ae4:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	4a e7       	ldi	r20, 0x7A	; 122
     aec:	53 e4       	ldi	r21, 0x43	; 67
     aee:	6f 81       	ldd	r22, Y+7	; 0x07
     af0:	78 85       	ldd	r23, Y+8	; 0x08
     af2:	89 85       	ldd	r24, Y+9	; 0x09
     af4:	9a 85       	ldd	r25, Y+10	; 0x0a
     af6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__mulsf3>
     afa:	dc 01       	movw	r26, r24
     afc:	cb 01       	movw	r24, r22
     afe:	8b 87       	std	Y+11, r24	; 0x0b
     b00:	9c 87       	std	Y+12, r25	; 0x0c
     b02:	ad 87       	std	Y+13, r26	; 0x0d
     b04:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e8       	ldi	r20, 0x80	; 128
     b0c:	5f e3       	ldi	r21, 0x3F	; 63
     b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b10:	7c 85       	ldd	r23, Y+12	; 0x0c
     b12:	8d 85       	ldd	r24, Y+13	; 0x0d
     b14:	9e 85       	ldd	r25, Y+14	; 0x0e
     b16:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__cmpsf2>
     b1a:	88 23       	and	r24, r24
     b1c:	2c f4       	brge	.+10     	; 0xb28 <test+0x7a>
		__ticks = 1;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	98 8b       	std	Y+16, r25	; 0x10
     b24:	8f 87       	std	Y+15, r24	; 0x0f
     b26:	3f c0       	rjmp	.+126    	; 0xba6 <test+0xf8>
	else if (__tmp > 65535)
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	3f ef       	ldi	r19, 0xFF	; 255
     b2c:	4f e7       	ldi	r20, 0x7F	; 127
     b2e:	57 e4       	ldi	r21, 0x47	; 71
     b30:	6b 85       	ldd	r22, Y+11	; 0x0b
     b32:	7c 85       	ldd	r23, Y+12	; 0x0c
     b34:	8d 85       	ldd	r24, Y+13	; 0x0d
     b36:	9e 85       	ldd	r25, Y+14	; 0x0e
     b38:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__gesf2>
     b3c:	18 16       	cp	r1, r24
     b3e:	4c f5       	brge	.+82     	; 0xb92 <test+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e2       	ldi	r20, 0x20	; 32
     b46:	51 e4       	ldi	r21, 0x41	; 65
     b48:	6f 81       	ldd	r22, Y+7	; 0x07
     b4a:	78 85       	ldd	r23, Y+8	; 0x08
     b4c:	89 85       	ldd	r24, Y+9	; 0x09
     b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b50:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__mulsf3>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	bc 01       	movw	r22, r24
     b5a:	cd 01       	movw	r24, r26
     b5c:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__fixunssfsi>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	98 8b       	std	Y+16, r25	; 0x10
     b66:	8f 87       	std	Y+15, r24	; 0x0f
     b68:	0f c0       	rjmp	.+30     	; 0xb88 <test+0xda>
     b6a:	89 e1       	ldi	r24, 0x19	; 25
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	9a 8b       	std	Y+18, r25	; 0x12
     b70:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b72:	89 89       	ldd	r24, Y+17	; 0x11
     b74:	9a 89       	ldd	r25, Y+18	; 0x12
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <test+0xc8>
     b7a:	9a 8b       	std	Y+18, r25	; 0x12
     b7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b80:	98 89       	ldd	r25, Y+16	; 0x10
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	98 8b       	std	Y+16, r25	; 0x10
     b86:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b88:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8a:	98 89       	ldd	r25, Y+16	; 0x10
     b8c:	89 2b       	or	r24, r25
     b8e:	69 f7       	brne	.-38     	; 0xb6a <test+0xbc>
     b90:	14 c0       	rjmp	.+40     	; 0xbba <test+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__fixunssfsi>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	98 8b       	std	Y+16, r25	; 0x10
     ba4:	8f 87       	std	Y+15, r24	; 0x0f
     ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba8:	98 89       	ldd	r25, Y+16	; 0x10
     baa:	9c 8b       	std	Y+20, r25	; 0x14
     bac:	8b 8b       	std	Y+19, r24	; 0x13
     bae:	8b 89       	ldd	r24, Y+19	; 0x13
     bb0:	9c 89       	ldd	r25, Y+20	; 0x14
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <test+0x104>
     bb6:	9c 8b       	std	Y+20, r25	; 0x14
     bb8:	8b 8b       	std	Y+19, r24	; 0x13
	_delay_ms(2000);
	int propperAddr = -1;
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	9f ef       	ldi	r25, 0xFF	; 255
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03

	for(i=0; i<=0xFF; i++)
     bc2:	1a 82       	std	Y+2, r1	; 0x02
     bc4:	19 82       	std	Y+1, r1	; 0x01
     bc6:	7c c0       	rjmp	.+248    	; 0xcc0 <test+0x212>
	{

	twiStart();
     bc8:	0e 94 8a 04 	call	0x914	; 0x914 <twiStart>
	twiWrite(writeAddr); //send device adress
     bcc:	8d e1       	ldi	r24, 0x1D	; 29
     bce:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>

	//displayString(".");
	if ((TWSR & 0xF8) == 0x18 || (TWSR & 0xF8) == 0x20 || (TWSR & 0xF8) == 0x38)
     bd2:	81 e2       	ldi	r24, 0x21	; 33
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	fc 01       	movw	r30, r24
     bd8:	80 81       	ld	r24, Z
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	88 7f       	andi	r24, 0xF8	; 248
     be0:	99 27       	eor	r25, r25
     be2:	48 97       	sbiw	r24, 0x18	; 24
     be4:	a9 f0       	breq	.+42     	; 0xc10 <test+0x162>
     be6:	81 e2       	ldi	r24, 0x21	; 33
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	fc 01       	movw	r30, r24
     bec:	80 81       	ld	r24, Z
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	88 7f       	andi	r24, 0xF8	; 248
     bf4:	99 27       	eor	r25, r25
     bf6:	80 97       	sbiw	r24, 0x20	; 32
     bf8:	59 f0       	breq	.+22     	; 0xc10 <test+0x162>
     bfa:	81 e2       	ldi	r24, 0x21	; 33
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	fc 01       	movw	r30, r24
     c00:	80 81       	ld	r24, Z
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	88 7f       	andi	r24, 0xF8	; 248
     c08:	99 27       	eor	r25, r25
     c0a:	c8 97       	sbiw	r24, 0x38	; 56
     c0c:	09 f0       	breq	.+2      	; 0xc10 <test+0x162>
     c0e:	51 c0       	rjmp	.+162    	; 0xcb2 <test+0x204>
	{
	displayString("pieknie kurwa!");
     c10:	89 e0       	ldi	r24, 0x09	; 9
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("udalo sie na adresie:");
     c18:	88 e1       	ldi	r24, 0x18	; 24
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayInt(i);
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>
	propperAddr = i;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	9c 83       	std	Y+4, r25	; 0x04
     c2e:	8b 83       	std	Y+3, r24	; 0x03

	displayString("status:");
     c30:	8e e2       	ldi	r24, 0x2E	; 46
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayInt((TWSR & 0xF8));
     c38:	81 e2       	ldi	r24, 0x21	; 33
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	88 7f       	andi	r24, 0xF8	; 248
     c46:	99 27       	eor	r25, r25
     c48:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>
	displayString("to oznacza:");
     c4c:	86 e3       	ldi	r24, 0x36	; 54
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	switch ((TWSR & 0xF8))
     c54:	81 e2       	ldi	r24, 0x21	; 33
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	fc 01       	movw	r30, r24
     c5a:	80 81       	ld	r24, Z
     c5c:	88 2f       	mov	r24, r24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	88 7f       	andi	r24, 0xF8	; 248
     c62:	99 27       	eor	r25, r25
     c64:	80 32       	cpi	r24, 0x20	; 32
     c66:	91 05       	cpc	r25, r1
     c68:	69 f0       	breq	.+26     	; 0xc84 <test+0x1d6>
     c6a:	88 33       	cpi	r24, 0x38	; 56
     c6c:	91 05       	cpc	r25, r1
     c6e:	91 f0       	breq	.+36     	; 0xc94 <test+0x1e6>
     c70:	48 97       	sbiw	r24, 0x18	; 24
     c72:	c1 f4       	brne	.+48     	; 0xca4 <test+0x1f6>
	{
	case 0x18 : { displayString("adres wyszedl,"); displayString("jest ack,"); }
     c74:	82 e4       	ldi	r24, 0x42	; 66
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
     c7c:	81 e5       	ldi	r24, 0x51	; 81
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	case 0x20 : { displayString("adres wyszedl,"); displayString("nie ma ack,"); }
     c84:	82 e4       	ldi	r24, 0x42	; 66
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
     c8c:	8b e5       	ldi	r24, 0x5B	; 91
     c8e:	92 e0       	ldi	r25, 0x02	; 2
     c90:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	case 0x38 : { displayString("adres wyszed,"); displayString("ale cos sie zjebalo,"); }
     c94:	87 e6       	ldi	r24, 0x67	; 103
     c96:	92 e0       	ldi	r25, 0x02	; 2
     c98:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
     c9c:	85 e7       	ldi	r24, 0x75	; 117
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	default: { displayString("sprawdz w doku"); }
     ca4:	8a e8       	ldi	r24, 0x8A	; 138
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	}
	twiStop();
     cac:	0e 94 9d 04 	call	0x93a	; 0x93a <twiStop>
	break;
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <test+0x220>
	}

	twiStop();
     cb2:	0e 94 9d 04 	call	0x93a	; 0x93a <twiStop>
	displayString("try adresy z zakresu 0-FF:");
	displayString(".");
	_delay_ms(2000);
	int propperAddr = -1;

	for(i=0; i<=0xFF; i++)
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	8f 3f       	cpi	r24, 0xFF	; 255
     cc6:	91 05       	cpc	r25, r1
     cc8:	09 f0       	breq	.+2      	; 0xccc <test+0x21e>
     cca:	0c f4       	brge	.+2      	; 0xcce <test+0x220>
     ccc:	7d cf       	rjmp	.-262    	; 0xbc8 <test+0x11a>
	}

	twiStop();
	}

	if (propperAddr == -1)
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	c1 f4       	brne	.+48     	; 0xd06 <test+0x258>
	{
	displayString("kupa :(");
     cd6:	89 e9       	ldi	r24, 0x99	; 153
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("ale dla pewnosci,");
     cde:	81 ea       	ldi	r24, 0xA1	; 161
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	displayString("read na 0x0D");
     ce6:	83 eb       	ldi	r24, 0xB3	; 179
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	int a = twiGetData(0x0D);
     cee:	8d e0       	ldi	r24, 0x0D	; 13
     cf0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <twiGetData>
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9e 83       	std	Y+6, r25	; 0x06
     cfa:	8d 83       	std	Y+5, r24	; 0x05
	displayInt(a);
     cfc:	8d 81       	ldd	r24, Y+5	; 0x05
     cfe:	9e 81       	ldd	r25, Y+6	; 0x06
     d00:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>
     d04:	58 c0       	rjmp	.+176    	; 0xdb6 <test+0x308>


	}
	else
	{
		displayString("no to tera, operacja read");
     d06:	80 ec       	ldi	r24, 0xC0	; 192
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
		displayString("4 kroki i wartosc ");
     d0e:	8a ed       	ldi	r24, 0xDA	; 218
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>

		twiStart();
     d16:	0e 94 8a 04 	call	0x914	; 0x914 <twiStart>
		displayString("1. status po start:");
     d1a:	89 e7       	ldi	r24, 0x79	; 121
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
		displayInt((TWSR & 0xF8));
     d22:	81 e2       	ldi	r24, 0x21	; 33
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	fc 01       	movw	r30, r24
     d28:	80 81       	ld	r24, Z
     d2a:	88 2f       	mov	r24, r24
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	88 7f       	andi	r24, 0xF8	; 248
     d30:	99 27       	eor	r25, r25
     d32:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>

		twiWrite(propperAddr); //send device addres for writing
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>
		displayString("2. status po writeAddr:");
     d3c:	8d e8       	ldi	r24, 0x8D	; 141
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
		displayInt((TWSR & 0xF8));
     d44:	81 e2       	ldi	r24, 0x21	; 33
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	fc 01       	movw	r30, r24
     d4a:	80 81       	ld	r24, Z
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	88 7f       	andi	r24, 0xF8	; 248
     d52:	99 27       	eor	r25, r25
     d54:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>

		twiWrite(0x0D); //send register address (np ten rejestr)
     d58:	8d e0       	ldi	r24, 0x0D	; 13
     d5a:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>

		displayString("3. status po regAddr:");
     d5e:	85 ea       	ldi	r24, 0xA5	; 165
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
		displayInt((TWSR & 0xF8));
     d66:	81 e2       	ldi	r24, 0x21	; 33
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 81       	ld	r24, Z
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	88 7f       	andi	r24, 0xF8	; 248
     d74:	99 27       	eor	r25, r25
     d76:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>

		twiWrite(propperAddr ^ 1); //send device address for reading
     d7a:	9b 81       	ldd	r25, Y+3	; 0x03
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	89 27       	eor	r24, r25
     d80:	0e 94 a9 04 	call	0x952	; 0x952 <twiWrite>

		displayString("4. status po readAddr:");
     d84:	8b eb       	ldi	r24, 0xBB	; 187
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
		displayInt((TWSR & 0xF8));
     d8c:	81 e2       	ldi	r24, 0x21	; 33
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	fc 01       	movw	r30, r24
     d92:	80 81       	ld	r24, Z
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	88 7f       	andi	r24, 0xF8	; 248
     d9a:	99 27       	eor	r25, r25
     d9c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>


		displayString("wartosc rejestru:");
     da0:	8d ee       	ldi	r24, 0xED	; 237
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
		displayInt(twiRead(1));
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	0e 94 c4 04 	call	0x988	; 0x988 <twiRead>
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <displayInt>

	}
}
     db6:	64 96       	adiw	r28, 0x14	; 20
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <usartInit>:
volatile uint8_t _readingUart = false;
volatile uint32_t uartVal = 0;
volatile unsigned int usart_buffer_ind = 0;

void usartInit(void)
{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
#define BAUD 9600
#include <util/setbaud.h>
	UBRRH = UBRRH_VALUE;
     dd0:	80 e4       	ldi	r24, 0x40	; 64
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	fc 01       	movw	r30, r24
     dd6:	10 82       	st	Z, r1
	UBRRL = UBRRL_VALUE;
     dd8:	89 e2       	ldi	r24, 0x29	; 41
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	2c e0       	ldi	r18, 0x0C	; 12
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
#if USE_2X
	UCSRA |=  (1<<U2X);
     de2:	8b e2       	ldi	r24, 0x2B	; 43
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	2b e2       	ldi	r18, 0x2B	; 43
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	f9 01       	movw	r30, r18
     dec:	20 81       	ld	r18, Z
     dee:	22 60       	ori	r18, 0x02	; 2
     df0:	fc 01       	movw	r30, r24
     df2:	20 83       	st	Z, r18
#else
	UCSRA &= ~(1<<U2X);
#endif

	usart_buffer = (char*)malloc(uartBufferSize);
     df4:	8e e1       	ldi	r24, 0x1E	; 30
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 16 0c 	call	0x182c	; 0x182c <malloc>
     dfc:	90 93 2e 03 	sts	0x032E, r25
     e00:	80 93 2d 03 	sts	0x032D, r24
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);  //bitów danych: 8
     e04:	80 e4       	ldi	r24, 0x40	; 64
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	26 e8       	ldi	r18, 0x86	; 134
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
	//bity stopu:  1
	//parzystość:  brak
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
     e0e:	8a e2       	ldi	r24, 0x2A	; 42
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	28 e9       	ldi	r18, 0x98	; 152
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <__vector_11>:

//--------------------------------------------------------------


ISR(USART_RXC_vect)
{
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	00 90 5f 00 	lds	r0, 0x005F
     e26:	0f 92       	push	r0
     e28:	11 24       	eor	r1, r1
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	6f 93       	push	r22
     e34:	7f 93       	push	r23
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	af 93       	push	r26
     e3c:	bf 93       	push	r27
     e3e:	ef 93       	push	r30
     e40:	ff 93       	push	r31
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	1f 92       	push	r1
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	char receivedByte;
	receivedByte = UDR; // Fetch the received byte value into the variable "ByteReceived"
     e4c:	8c e2       	ldi	r24, 0x2C	; 44
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	fc 01       	movw	r30, r24
     e52:	80 81       	ld	r24, Z
     e54:	89 83       	std	Y+1, r24	; 0x01

	if (_readingUart)
     e56:	80 91 29 03 	lds	r24, 0x0329
     e5a:	88 23       	and	r24, r24
     e5c:	09 f4       	brne	.+2      	; 0xe60 <__vector_11+0x42>
     e5e:	4b c0       	rjmp	.+150    	; 0xef6 <__vector_11+0xd8>
	{
		if (receivedByte == 0x08 || receivedByte == 0x1B)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	88 30       	cpi	r24, 0x08	; 8
     e64:	19 f0       	breq	.+6      	; 0xe6c <__vector_11+0x4e>
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	8b 31       	cpi	r24, 0x1B	; 27
     e6a:	41 f4       	brne	.+16     	; 0xe7c <__vector_11+0x5e>
		{
			displayString("");
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	92 e0       	ldi	r25, 0x02	; 2
     e70:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
			_readingUart = 2;
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	80 93 29 03 	sts	0x0329, r24
			return;
     e7a:	3d c0       	rjmp	.+122    	; 0xef6 <__vector_11+0xd8>
		}
		else {

			if (receivedByte == '\r')
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	8d 30       	cpi	r24, 0x0D	; 13
     e80:	39 f4       	brne	.+14     	; 0xe90 <__vector_11+0x72>
			{
				displayString("");
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
				_readingUart = false;
     e8a:	10 92 29 03 	sts	0x0329, r1
				return;
     e8e:	33 c0       	rjmp	.+102    	; 0xef6 <__vector_11+0xd8>
			}
			else {

				UDR = receivedByte; // Echo back the received byte back to the computer
     e90:	8c e2       	ldi	r24, 0x2C	; 44
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	29 81       	ldd	r18, Y+1	; 0x01
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
			}
			uartVal = 10 * uartVal + (receivedByte - '0');
     e9a:	80 91 25 03 	lds	r24, 0x0325
     e9e:	90 91 26 03 	lds	r25, 0x0326
     ea2:	a0 91 27 03 	lds	r26, 0x0327
     ea6:	b0 91 28 03 	lds	r27, 0x0328
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	aa 1f       	adc	r26, r26
     eb0:	bb 1f       	adc	r27, r27
     eb2:	9c 01       	movw	r18, r24
     eb4:	ad 01       	movw	r20, r26
     eb6:	22 0f       	add	r18, r18
     eb8:	33 1f       	adc	r19, r19
     eba:	44 1f       	adc	r20, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	22 0f       	add	r18, r18
     ec0:	33 1f       	adc	r19, r19
     ec2:	44 1f       	adc	r20, r20
     ec4:	55 1f       	adc	r21, r21
     ec6:	28 0f       	add	r18, r24
     ec8:	39 1f       	adc	r19, r25
     eca:	4a 1f       	adc	r20, r26
     ecc:	5b 1f       	adc	r21, r27
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	c0 97       	sbiw	r24, 0x30	; 48
     ed6:	09 2e       	mov	r0, r25
     ed8:	00 0c       	add	r0, r0
     eda:	aa 0b       	sbc	r26, r26
     edc:	bb 0b       	sbc	r27, r27
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	a4 1f       	adc	r26, r20
     ee4:	b5 1f       	adc	r27, r21
     ee6:	80 93 25 03 	sts	0x0325, r24
     eea:	90 93 26 03 	sts	0x0326, r25
     eee:	a0 93 27 03 	sts	0x0327, r26
     ef2:	b0 93 28 03 	sts	0x0328, r27
					}
		}
	}
     ef6:	0f 90       	pop	r0
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	00 92 5f 00 	sts	0x005F, r0
     f1a:	0f 90       	pop	r0
     f1c:	1f 90       	pop	r1
     f1e:	18 95       	reti

00000f20 <__vector_12>:



	//--------------------------------------------------------------

	ISR(USART_UDRE_vect){
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	00 90 5f 00 	lds	r0, 0x005F
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62

		//static unsigned int usart_buffer_ind = 0;
		if(usart_buffer[usart_buffer_ind]!= 0){
     f48:	20 91 2d 03 	lds	r18, 0x032D
     f4c:	30 91 2e 03 	lds	r19, 0x032E
     f50:	80 91 2a 03 	lds	r24, 0x032A
     f54:	90 91 2b 03 	lds	r25, 0x032B
     f58:	82 0f       	add	r24, r18
     f5a:	93 1f       	adc	r25, r19
     f5c:	fc 01       	movw	r30, r24
     f5e:	80 81       	ld	r24, Z
     f60:	88 23       	and	r24, r24
     f62:	c1 f0       	breq	.+48     	; 0xf94 <__vector_12+0x74>
			UDR = usart_buffer[usart_buffer_ind++];
     f64:	2c e2       	ldi	r18, 0x2C	; 44
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 91 2d 03 	lds	r20, 0x032D
     f6c:	50 91 2e 03 	lds	r21, 0x032E
     f70:	80 91 2a 03 	lds	r24, 0x032A
     f74:	90 91 2b 03 	lds	r25, 0x032B
     f78:	bc 01       	movw	r22, r24
     f7a:	6f 5f       	subi	r22, 0xFF	; 255
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	70 93 2b 03 	sts	0x032B, r23
     f82:	60 93 2a 03 	sts	0x032A, r22
     f86:	84 0f       	add	r24, r20
     f88:	95 1f       	adc	r25, r21
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	f9 01       	movw	r30, r18
     f90:	80 83       	st	Z, r24
     f92:	0d c0       	rjmp	.+26     	; 0xfae <__vector_12+0x8e>

		}else{
			UCSRB &= ~(1<<UDRIE);
     f94:	8a e2       	ldi	r24, 0x2A	; 42
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	2a e2       	ldi	r18, 0x2A	; 42
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	f9 01       	movw	r30, r18
     f9e:	20 81       	ld	r18, Z
     fa0:	2f 7d       	andi	r18, 0xDF	; 223
     fa2:	fc 01       	movw	r30, r24
     fa4:	20 83       	st	Z, r18
			usart_buffer_ind = 0;
     fa6:	10 92 2b 03 	sts	0x032B, r1
     faa:	10 92 2a 03 	sts	0x032A, r1
		}
	}
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	ff 91       	pop	r31
     fb4:	ef 91       	pop	r30
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	00 92 5f 00 	sts	0x005F, r0
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <displayInt>:

	//--------------------------------------------------------------


	void displayInt(int value)
	{
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <displayInt+0x6>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
		//char* data = (char*) malloc(30);

		//displayString("dec");
		while(usart_buffer_ind);
     fe0:	00 00       	nop
     fe2:	80 91 2a 03 	lds	r24, 0x032A
     fe6:	90 91 2b 03 	lds	r25, 0x032B
     fea:	89 2b       	or	r24, r25
     fec:	d1 f7       	brne	.-12     	; 0xfe2 <displayInt+0x10>
		sprintf(usart_buffer, "%d", value);
     fee:	80 91 2d 03 	lds	r24, 0x032D
     ff2:	90 91 2e 03 	lds	r25, 0x032E
     ff6:	2a 81       	ldd	r18, Y+2	; 0x02
     ff8:	2f 93       	push	r18
     ffa:	29 81       	ldd	r18, Y+1	; 0x01
     ffc:	2f 93       	push	r18
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	33 e0       	ldi	r19, 0x03	; 3
    1002:	23 2f       	mov	r18, r19
    1004:	2f 93       	push	r18
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	33 e0       	ldi	r19, 0x03	; 3
    100a:	2f 93       	push	r18
    100c:	29 2f       	mov	r18, r25
    100e:	2f 93       	push	r18
    1010:	8f 93       	push	r24
    1012:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <sprintf>
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
		sendToUc(true);
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 8c 08 	call	0x1118	; 0x1118 <sendToUc>
		//displayString("hex");
		//value = (value/16)*10 + value-(value/16)*16;
		//sprintf(data, "%d", value);
		//displayString(data);

	}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <displayString>:
	void displayString(char* data)
	{
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	00 d0       	rcall	.+0      	; 0x1038 <displayString+0x6>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
		while(usart_buffer_ind);
    1040:	00 00       	nop
    1042:	80 91 2a 03 	lds	r24, 0x032A
    1046:	90 91 2b 03 	lds	r25, 0x032B
    104a:	89 2b       	or	r24, r25
    104c:	d1 f7       	brne	.-12     	; 0x1042 <displayString+0x10>
		strncpy(usart_buffer, data, uartBufferSize);
    104e:	80 91 2d 03 	lds	r24, 0x032D
    1052:	90 91 2e 03 	lds	r25, 0x032E
    1056:	29 81       	ldd	r18, Y+1	; 0x01
    1058:	3a 81       	ldd	r19, Y+2	; 0x02
    105a:	4e e1       	ldi	r20, 0x1E	; 30
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	b9 01       	movw	r22, r18
    1060:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <strncpy>
		sendToUc(true);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 8c 08 	call	0x1118	; 0x1118 <sendToUc>
	}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	08 95       	ret

00001074 <sendData>:

	void sendData(uint16_t data, bool endline)
	{
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	00 d0       	rcall	.+0      	; 0x107a <sendData+0x6>
    107a:	1f 92       	push	r1
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	6b 83       	std	Y+3, r22	; 0x03
		while(usart_buffer_ind);
    1086:	00 00       	nop
    1088:	80 91 2a 03 	lds	r24, 0x032A
    108c:	90 91 2b 03 	lds	r25, 0x032B
    1090:	89 2b       	or	r24, r25
    1092:	d1 f7       	brne	.-12     	; 0x1088 <sendData+0x14>
//		for(i=0; i<xSize; i++)
//		{
//			while(usart_buffer_ind);
//			sprintf(usart_buffer, "%d", data[i]);
//		}
		sprintf(usart_buffer, "%d", data);
    1094:	80 91 2d 03 	lds	r24, 0x032D
    1098:	90 91 2e 03 	lds	r25, 0x032E
    109c:	2a 81       	ldd	r18, Y+2	; 0x02
    109e:	2f 93       	push	r18
    10a0:	29 81       	ldd	r18, Y+1	; 0x01
    10a2:	2f 93       	push	r18
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	33 e0       	ldi	r19, 0x03	; 3
    10a8:	23 2f       	mov	r18, r19
    10aa:	2f 93       	push	r18
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	33 e0       	ldi	r19, 0x03	; 3
    10b0:	2f 93       	push	r18
    10b2:	29 2f       	mov	r18, r25
    10b4:	2f 93       	push	r18
    10b6:	8f 93       	push	r24
    10b8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <sprintf>
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
		while(usart_buffer_ind);
    10c8:	00 00       	nop
    10ca:	80 91 2a 03 	lds	r24, 0x032A
    10ce:	90 91 2b 03 	lds	r25, 0x032B
    10d2:	89 2b       	or	r24, r25
    10d4:	d1 f7       	brne	.-12     	; 0x10ca <sendData+0x56>
		if (endline)
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 23       	and	r24, r24
    10da:	59 f0       	breq	.+22     	; 0x10f2 <sendData+0x7e>
		strncpy(usart_buffer, ";", uartBufferSize);
    10dc:	80 91 2d 03 	lds	r24, 0x032D
    10e0:	90 91 2e 03 	lds	r25, 0x032E
    10e4:	4e e1       	ldi	r20, 0x1E	; 30
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	63 e0       	ldi	r22, 0x03	; 3
    10ea:	73 e0       	ldi	r23, 0x03	; 3
    10ec:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <strncpy>
    10f0:	0a c0       	rjmp	.+20     	; 0x1106 <sendData+0x92>
		else
		strncpy(usart_buffer, " ", uartBufferSize);
    10f2:	80 91 2d 03 	lds	r24, 0x032D
    10f6:	90 91 2e 03 	lds	r25, 0x032E
    10fa:	4e e1       	ldi	r20, 0x1E	; 30
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	65 e0       	ldi	r22, 0x05	; 5
    1100:	73 e0       	ldi	r23, 0x03	; 3
    1102:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <strncpy>
		sendToUc(true); //with end line
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	0e 94 8c 08 	call	0x1118	; 0x1118 <sendToUc>
	}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <sendToUc>:

	void sendToUc(bool newLine)
	{
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	00 d0       	rcall	.+0      	; 0x111e <sendToUc+0x6>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	8a 83       	std	Y+2, r24	; 0x02


		while(tx_flag);
    1124:	00 00       	nop
    1126:	8a e2       	ldi	r24, 0x2A	; 42
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	fc 01       	movw	r30, r24
    112c:	80 81       	ld	r24, Z
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	80 72       	andi	r24, 0x20	; 32
    1134:	99 27       	eor	r25, r25
    1136:	89 2b       	or	r24, r25
    1138:	b1 f7       	brne	.-20     	; 0x1126 <sendToUc+0xe>
		unsigned char z;
		for(z=0; z<uartBufferSize; z++){
    113a:	19 82       	std	Y+1, r1	; 0x01
    113c:	53 c0       	rjmp	.+166    	; 0x11e4 <sendToUc+0xcc>
			if(usart_buffer[z]==0){
    113e:	20 91 2d 03 	lds	r18, 0x032D
    1142:	30 91 2e 03 	lds	r19, 0x032E
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	fc 01       	movw	r30, r24
    1152:	80 81       	ld	r24, Z
    1154:	88 23       	and	r24, r24
    1156:	09 f0       	breq	.+2      	; 0x115a <sendToUc+0x42>
    1158:	42 c0       	rjmp	.+132    	; 0x11de <sendToUc+0xc6>
				if (newLine)
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	88 23       	and	r24, r24
    115e:	31 f1       	breq	.+76     	; 0x11ac <sendToUc+0x94>
				{
					usart_buffer[z]   = 13;  //CR (Carrige Return)
    1160:	20 91 2d 03 	lds	r18, 0x032D
    1164:	30 91 2e 03 	lds	r19, 0x032E
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	88 2f       	mov	r24, r24
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	2d e0       	ldi	r18, 0x0D	; 13
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
					usart_buffer[z+1]  = 10; // LF (Line Feed)
    1178:	20 91 2d 03 	lds	r18, 0x032D
    117c:	30 91 2e 03 	lds	r19, 0x032E
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	82 0f       	add	r24, r18
    118a:	93 1f       	adc	r25, r19
    118c:	2a e0       	ldi	r18, 0x0A	; 10
    118e:	fc 01       	movw	r30, r24
    1190:	20 83       	st	Z, r18
					usart_buffer[z+2]  = 0;  //string end
    1192:	20 91 2d 03 	lds	r18, 0x032D
    1196:	30 91 2e 03 	lds	r19, 0x032E
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 96       	adiw	r24, 0x02	; 2
    11a2:	82 0f       	add	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	fc 01       	movw	r30, r24
    11a8:	10 82       	st	Z, r1
				else
				{
					usart_buffer[z]   = 32;  //SPACE
					usart_buffer[z+1]  = 0;  //string end
				}
				break;
    11aa:	20 c0       	rjmp	.+64     	; 0x11ec <sendToUc+0xd4>
					usart_buffer[z+1]  = 10; // LF (Line Feed)
					usart_buffer[z+2]  = 0;  //string end
				}
				else
				{
					usart_buffer[z]   = 32;  //SPACE
    11ac:	20 91 2d 03 	lds	r18, 0x032D
    11b0:	30 91 2e 03 	lds	r19, 0x032E
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	20 e2       	ldi	r18, 0x20	; 32
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 83       	st	Z, r18
					usart_buffer[z+1]  = 0;  //string end
    11c4:	20 91 2d 03 	lds	r18, 0x032D
    11c8:	30 91 2e 03 	lds	r19, 0x032E
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	fc 01       	movw	r30, r24
    11da:	10 82       	st	Z, r1
				}
				break;
    11dc:	07 c0       	rjmp	.+14     	; 0x11ec <sendToUc+0xd4>
	{


		while(tx_flag);
		unsigned char z;
		for(z=0; z<uartBufferSize; z++){
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	8f 5f       	subi	r24, 0xFF	; 255
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	8e 31       	cpi	r24, 0x1E	; 30
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <sendToUc+0xd4>
    11ea:	a9 cf       	rjmp	.-174    	; 0x113e <sendToUc+0x26>
				}
				break;
			}
		}

		while (!(UCSRA & (1<<UDRE)));
    11ec:	00 00       	nop
    11ee:	8b e2       	ldi	r24, 0x2B	; 43
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	fc 01       	movw	r30, r24
    11f4:	80 81       	ld	r24, Z
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	80 72       	andi	r24, 0x20	; 32
    11fc:	99 27       	eor	r25, r25
    11fe:	89 2b       	or	r24, r25
    1200:	b1 f3       	breq	.-20     	; 0x11ee <sendToUc+0xd6>

		usart_buffer_ind = 0;
    1202:	10 92 2b 03 	sts	0x032B, r1
    1206:	10 92 2a 03 	sts	0x032A, r1
		UCSRB |= (1<<UDRIE);
    120a:	8a e2       	ldi	r24, 0x2A	; 42
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	2a e2       	ldi	r18, 0x2A	; 42
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	f9 01       	movw	r30, r18
    1214:	20 81       	ld	r18, Z
    1216:	20 62       	ori	r18, 0x20	; 32
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18


	}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <uartStart>:

	void uartStart(void)
	{
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
		usartInit();
    122e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <usartInit>
		displayString("*chd400 initialized*");
    1232:	87 e0       	ldi	r24, 0x07	; 7
    1234:	93 e0       	ldi	r25, 0x03	; 3
    1236:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
	}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <wait4input>:

	//--------------------------------------------------------------

	uint32_t wait4input(char* prompt)
	{
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	00 d0       	rcall	.+0      	; 0x1246 <wait4input+0x6>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
		uartVal = 0;
    124e:	10 92 25 03 	sts	0x0325, r1
    1252:	10 92 26 03 	sts	0x0326, r1
    1256:	10 92 27 03 	sts	0x0327, r1
    125a:	10 92 28 03 	sts	0x0328, r1
		displayString(prompt);
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
		_readingUart = true;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 29 03 	sts	0x0329, r24
		while (_readingUart != 0 )
    126c:	13 c0       	rjmp	.+38     	; 0x1294 <wait4input+0x54>
		{
			if(_readingUart == 2)
    126e:	80 91 29 03 	lds	r24, 0x0329
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	79 f4       	brne	.+30     	; 0x1294 <wait4input+0x54>
			{
				displayString(prompt);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	0e 94 19 08 	call	0x1032	; 0x1032 <displayString>
				uartVal = 0;
    127e:	10 92 25 03 	sts	0x0325, r1
    1282:	10 92 26 03 	sts	0x0326, r1
    1286:	10 92 27 03 	sts	0x0327, r1
    128a:	10 92 28 03 	sts	0x0328, r1
				_readingUart = true;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	80 93 29 03 	sts	0x0329, r24
	uint32_t wait4input(char* prompt)
	{
		uartVal = 0;
		displayString(prompt);
		_readingUart = true;
		while (_readingUart != 0 )
    1294:	80 91 29 03 	lds	r24, 0x0329
    1298:	88 23       	and	r24, r24
    129a:	49 f7       	brne	.-46     	; 0x126e <wait4input+0x2e>
				displayString(prompt);
				uartVal = 0;
				_readingUart = true;
			}
		}
		_readingUart = false;
    129c:	10 92 29 03 	sts	0x0329, r1
		return uartVal;
    12a0:	80 91 25 03 	lds	r24, 0x0325
    12a4:	90 91 26 03 	lds	r25, 0x0326
    12a8:	a0 91 27 03 	lds	r26, 0x0327
    12ac:	b0 91 28 03 	lds	r27, 0x0328
	}
    12b0:	bc 01       	movw	r22, r24
    12b2:	cd 01       	movw	r24, r26
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <__divmodhi4>:
    12be:	97 fb       	bst	r25, 7
    12c0:	07 2e       	mov	r0, r23
    12c2:	16 f4       	brtc	.+4      	; 0x12c8 <__divmodhi4+0xa>
    12c4:	00 94       	com	r0
    12c6:	07 d0       	rcall	.+14     	; 0x12d6 <__divmodhi4_neg1>
    12c8:	77 fd       	sbrc	r23, 7
    12ca:	09 d0       	rcall	.+18     	; 0x12de <__divmodhi4_neg2>
    12cc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__udivmodhi4>
    12d0:	07 fc       	sbrc	r0, 7
    12d2:	05 d0       	rcall	.+10     	; 0x12de <__divmodhi4_neg2>
    12d4:	3e f4       	brtc	.+14     	; 0x12e4 <__divmodhi4_exit>

000012d6 <__divmodhi4_neg1>:
    12d6:	90 95       	com	r25
    12d8:	81 95       	neg	r24
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	08 95       	ret

000012de <__divmodhi4_neg2>:
    12de:	70 95       	com	r23
    12e0:	61 95       	neg	r22
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255

000012e4 <__divmodhi4_exit>:
    12e4:	08 95       	ret

000012e6 <__udivmodhi4>:
    12e6:	aa 1b       	sub	r26, r26
    12e8:	bb 1b       	sub	r27, r27
    12ea:	51 e1       	ldi	r21, 0x11	; 17
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <__udivmodhi4_ep>

000012ee <__udivmodhi4_loop>:
    12ee:	aa 1f       	adc	r26, r26
    12f0:	bb 1f       	adc	r27, r27
    12f2:	a6 17       	cp	r26, r22
    12f4:	b7 07       	cpc	r27, r23
    12f6:	10 f0       	brcs	.+4      	; 0x12fc <__udivmodhi4_ep>
    12f8:	a6 1b       	sub	r26, r22
    12fa:	b7 0b       	sbc	r27, r23

000012fc <__udivmodhi4_ep>:
    12fc:	88 1f       	adc	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	5a 95       	dec	r21
    1302:	a9 f7       	brne	.-22     	; 0x12ee <__udivmodhi4_loop>
    1304:	80 95       	com	r24
    1306:	90 95       	com	r25
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	08 95       	ret

0000130e <__subsf3>:
    130e:	50 58       	subi	r21, 0x80	; 128

00001310 <__addsf3>:
    1310:	bb 27       	eor	r27, r27
    1312:	aa 27       	eor	r26, r26
    1314:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3x>
    1318:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_round>
    131c:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_pscA>
    1320:	38 f0       	brcs	.+14     	; 0x1330 <__addsf3+0x20>
    1322:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__fp_pscB>
    1326:	20 f0       	brcs	.+8      	; 0x1330 <__addsf3+0x20>
    1328:	39 f4       	brne	.+14     	; 0x1338 <__addsf3+0x28>
    132a:	9f 3f       	cpi	r25, 0xFF	; 255
    132c:	19 f4       	brne	.+6      	; 0x1334 <__addsf3+0x24>
    132e:	26 f4       	brtc	.+8      	; 0x1338 <__addsf3+0x28>
    1330:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__fp_nan>
    1334:	0e f4       	brtc	.+2      	; 0x1338 <__addsf3+0x28>
    1336:	e0 95       	com	r30
    1338:	e7 fb       	bst	r30, 7
    133a:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_inf>

0000133e <__addsf3x>:
    133e:	e9 2f       	mov	r30, r25
    1340:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__fp_split3>
    1344:	58 f3       	brcs	.-42     	; 0x131c <__addsf3+0xc>
    1346:	ba 17       	cp	r27, r26
    1348:	62 07       	cpc	r22, r18
    134a:	73 07       	cpc	r23, r19
    134c:	84 07       	cpc	r24, r20
    134e:	95 07       	cpc	r25, r21
    1350:	20 f0       	brcs	.+8      	; 0x135a <__addsf3x+0x1c>
    1352:	79 f4       	brne	.+30     	; 0x1372 <__addsf3x+0x34>
    1354:	a6 f5       	brtc	.+104    	; 0x13be <__addsf3x+0x80>
    1356:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__fp_zero>
    135a:	0e f4       	brtc	.+2      	; 0x135e <__addsf3x+0x20>
    135c:	e0 95       	com	r30
    135e:	0b 2e       	mov	r0, r27
    1360:	ba 2f       	mov	r27, r26
    1362:	a0 2d       	mov	r26, r0
    1364:	0b 01       	movw	r0, r22
    1366:	b9 01       	movw	r22, r18
    1368:	90 01       	movw	r18, r0
    136a:	0c 01       	movw	r0, r24
    136c:	ca 01       	movw	r24, r20
    136e:	a0 01       	movw	r20, r0
    1370:	11 24       	eor	r1, r1
    1372:	ff 27       	eor	r31, r31
    1374:	59 1b       	sub	r21, r25
    1376:	99 f0       	breq	.+38     	; 0x139e <__addsf3x+0x60>
    1378:	59 3f       	cpi	r21, 0xF9	; 249
    137a:	50 f4       	brcc	.+20     	; 0x1390 <__addsf3x+0x52>
    137c:	50 3e       	cpi	r21, 0xE0	; 224
    137e:	68 f1       	brcs	.+90     	; 0x13da <__addsf3x+0x9c>
    1380:	1a 16       	cp	r1, r26
    1382:	f0 40       	sbci	r31, 0x00	; 0
    1384:	a2 2f       	mov	r26, r18
    1386:	23 2f       	mov	r18, r19
    1388:	34 2f       	mov	r19, r20
    138a:	44 27       	eor	r20, r20
    138c:	58 5f       	subi	r21, 0xF8	; 248
    138e:	f3 cf       	rjmp	.-26     	; 0x1376 <__addsf3x+0x38>
    1390:	46 95       	lsr	r20
    1392:	37 95       	ror	r19
    1394:	27 95       	ror	r18
    1396:	a7 95       	ror	r26
    1398:	f0 40       	sbci	r31, 0x00	; 0
    139a:	53 95       	inc	r21
    139c:	c9 f7       	brne	.-14     	; 0x1390 <__addsf3x+0x52>
    139e:	7e f4       	brtc	.+30     	; 0x13be <__addsf3x+0x80>
    13a0:	1f 16       	cp	r1, r31
    13a2:	ba 0b       	sbc	r27, r26
    13a4:	62 0b       	sbc	r22, r18
    13a6:	73 0b       	sbc	r23, r19
    13a8:	84 0b       	sbc	r24, r20
    13aa:	ba f0       	brmi	.+46     	; 0x13da <__addsf3x+0x9c>
    13ac:	91 50       	subi	r25, 0x01	; 1
    13ae:	a1 f0       	breq	.+40     	; 0x13d8 <__addsf3x+0x9a>
    13b0:	ff 0f       	add	r31, r31
    13b2:	bb 1f       	adc	r27, r27
    13b4:	66 1f       	adc	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	88 1f       	adc	r24, r24
    13ba:	c2 f7       	brpl	.-16     	; 0x13ac <__addsf3x+0x6e>
    13bc:	0e c0       	rjmp	.+28     	; 0x13da <__addsf3x+0x9c>
    13be:	ba 0f       	add	r27, r26
    13c0:	62 1f       	adc	r22, r18
    13c2:	73 1f       	adc	r23, r19
    13c4:	84 1f       	adc	r24, r20
    13c6:	48 f4       	brcc	.+18     	; 0x13da <__addsf3x+0x9c>
    13c8:	87 95       	ror	r24
    13ca:	77 95       	ror	r23
    13cc:	67 95       	ror	r22
    13ce:	b7 95       	ror	r27
    13d0:	f7 95       	ror	r31
    13d2:	9e 3f       	cpi	r25, 0xFE	; 254
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <__addsf3x+0x9a>
    13d6:	b0 cf       	rjmp	.-160    	; 0x1338 <__addsf3+0x28>
    13d8:	93 95       	inc	r25
    13da:	88 0f       	add	r24, r24
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <__addsf3x+0xa2>
    13de:	99 27       	eor	r25, r25
    13e0:	ee 0f       	add	r30, r30
    13e2:	97 95       	ror	r25
    13e4:	87 95       	ror	r24
    13e6:	08 95       	ret

000013e8 <__cmpsf2>:
    13e8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__fp_cmp>
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <__cmpsf2+0x8>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	08 95       	ret

000013f2 <__divsf3>:
    13f2:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3x>
    13f6:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_round>
    13fa:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__fp_pscB>
    13fe:	58 f0       	brcs	.+22     	; 0x1416 <__divsf3+0x24>
    1400:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_pscA>
    1404:	40 f0       	brcs	.+16     	; 0x1416 <__divsf3+0x24>
    1406:	29 f4       	brne	.+10     	; 0x1412 <__divsf3+0x20>
    1408:	5f 3f       	cpi	r21, 0xFF	; 255
    140a:	29 f0       	breq	.+10     	; 0x1416 <__divsf3+0x24>
    140c:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_inf>
    1410:	51 11       	cpse	r21, r1
    1412:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__fp_szero>
    1416:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__fp_nan>

0000141a <__divsf3x>:
    141a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__fp_split3>
    141e:	68 f3       	brcs	.-38     	; 0x13fa <__divsf3+0x8>

00001420 <__divsf3_pse>:
    1420:	99 23       	and	r25, r25
    1422:	b1 f3       	breq	.-20     	; 0x1410 <__divsf3+0x1e>
    1424:	55 23       	and	r21, r21
    1426:	91 f3       	breq	.-28     	; 0x140c <__divsf3+0x1a>
    1428:	95 1b       	sub	r25, r21
    142a:	55 0b       	sbc	r21, r21
    142c:	bb 27       	eor	r27, r27
    142e:	aa 27       	eor	r26, r26
    1430:	62 17       	cp	r22, r18
    1432:	73 07       	cpc	r23, r19
    1434:	84 07       	cpc	r24, r20
    1436:	38 f0       	brcs	.+14     	; 0x1446 <__divsf3_pse+0x26>
    1438:	9f 5f       	subi	r25, 0xFF	; 255
    143a:	5f 4f       	sbci	r21, 0xFF	; 255
    143c:	22 0f       	add	r18, r18
    143e:	33 1f       	adc	r19, r19
    1440:	44 1f       	adc	r20, r20
    1442:	aa 1f       	adc	r26, r26
    1444:	a9 f3       	breq	.-22     	; 0x1430 <__divsf3_pse+0x10>
    1446:	35 d0       	rcall	.+106    	; 0x14b2 <__divsf3_pse+0x92>
    1448:	0e 2e       	mov	r0, r30
    144a:	3a f0       	brmi	.+14     	; 0x145a <__divsf3_pse+0x3a>
    144c:	e0 e8       	ldi	r30, 0x80	; 128
    144e:	32 d0       	rcall	.+100    	; 0x14b4 <__divsf3_pse+0x94>
    1450:	91 50       	subi	r25, 0x01	; 1
    1452:	50 40       	sbci	r21, 0x00	; 0
    1454:	e6 95       	lsr	r30
    1456:	00 1c       	adc	r0, r0
    1458:	ca f7       	brpl	.-14     	; 0x144c <__divsf3_pse+0x2c>
    145a:	2b d0       	rcall	.+86     	; 0x14b2 <__divsf3_pse+0x92>
    145c:	fe 2f       	mov	r31, r30
    145e:	29 d0       	rcall	.+82     	; 0x14b2 <__divsf3_pse+0x92>
    1460:	66 0f       	add	r22, r22
    1462:	77 1f       	adc	r23, r23
    1464:	88 1f       	adc	r24, r24
    1466:	bb 1f       	adc	r27, r27
    1468:	26 17       	cp	r18, r22
    146a:	37 07       	cpc	r19, r23
    146c:	48 07       	cpc	r20, r24
    146e:	ab 07       	cpc	r26, r27
    1470:	b0 e8       	ldi	r27, 0x80	; 128
    1472:	09 f0       	breq	.+2      	; 0x1476 <__divsf3_pse+0x56>
    1474:	bb 0b       	sbc	r27, r27
    1476:	80 2d       	mov	r24, r0
    1478:	bf 01       	movw	r22, r30
    147a:	ff 27       	eor	r31, r31
    147c:	93 58       	subi	r25, 0x83	; 131
    147e:	5f 4f       	sbci	r21, 0xFF	; 255
    1480:	3a f0       	brmi	.+14     	; 0x1490 <__divsf3_pse+0x70>
    1482:	9e 3f       	cpi	r25, 0xFE	; 254
    1484:	51 05       	cpc	r21, r1
    1486:	78 f0       	brcs	.+30     	; 0x14a6 <__divsf3_pse+0x86>
    1488:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_inf>
    148c:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__fp_szero>
    1490:	5f 3f       	cpi	r21, 0xFF	; 255
    1492:	e4 f3       	brlt	.-8      	; 0x148c <__divsf3_pse+0x6c>
    1494:	98 3e       	cpi	r25, 0xE8	; 232
    1496:	d4 f3       	brlt	.-12     	; 0x148c <__divsf3_pse+0x6c>
    1498:	86 95       	lsr	r24
    149a:	77 95       	ror	r23
    149c:	67 95       	ror	r22
    149e:	b7 95       	ror	r27
    14a0:	f7 95       	ror	r31
    14a2:	9f 5f       	subi	r25, 0xFF	; 255
    14a4:	c9 f7       	brne	.-14     	; 0x1498 <__divsf3_pse+0x78>
    14a6:	88 0f       	add	r24, r24
    14a8:	91 1d       	adc	r25, r1
    14aa:	96 95       	lsr	r25
    14ac:	87 95       	ror	r24
    14ae:	97 f9       	bld	r25, 7
    14b0:	08 95       	ret
    14b2:	e1 e0       	ldi	r30, 0x01	; 1
    14b4:	66 0f       	add	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	bb 1f       	adc	r27, r27
    14bc:	62 17       	cp	r22, r18
    14be:	73 07       	cpc	r23, r19
    14c0:	84 07       	cpc	r24, r20
    14c2:	ba 07       	cpc	r27, r26
    14c4:	20 f0       	brcs	.+8      	; 0x14ce <__divsf3_pse+0xae>
    14c6:	62 1b       	sub	r22, r18
    14c8:	73 0b       	sbc	r23, r19
    14ca:	84 0b       	sbc	r24, r20
    14cc:	ba 0b       	sbc	r27, r26
    14ce:	ee 1f       	adc	r30, r30
    14d0:	88 f7       	brcc	.-30     	; 0x14b4 <__divsf3_pse+0x94>
    14d2:	e0 95       	com	r30
    14d4:	08 95       	ret

000014d6 <__fixunssfsi>:
    14d6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__fp_splitA>
    14da:	88 f0       	brcs	.+34     	; 0x14fe <__fixunssfsi+0x28>
    14dc:	9f 57       	subi	r25, 0x7F	; 127
    14de:	98 f0       	brcs	.+38     	; 0x1506 <__fixunssfsi+0x30>
    14e0:	b9 2f       	mov	r27, r25
    14e2:	99 27       	eor	r25, r25
    14e4:	b7 51       	subi	r27, 0x17	; 23
    14e6:	b0 f0       	brcs	.+44     	; 0x1514 <__fixunssfsi+0x3e>
    14e8:	e1 f0       	breq	.+56     	; 0x1522 <__fixunssfsi+0x4c>
    14ea:	66 0f       	add	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	1a f0       	brmi	.+6      	; 0x14fa <__fixunssfsi+0x24>
    14f4:	ba 95       	dec	r27
    14f6:	c9 f7       	brne	.-14     	; 0x14ea <__fixunssfsi+0x14>
    14f8:	14 c0       	rjmp	.+40     	; 0x1522 <__fixunssfsi+0x4c>
    14fa:	b1 30       	cpi	r27, 0x01	; 1
    14fc:	91 f0       	breq	.+36     	; 0x1522 <__fixunssfsi+0x4c>
    14fe:	0e 94 9d 0b 	call	0x173a	; 0x173a <__fp_zero>
    1502:	b1 e0       	ldi	r27, 0x01	; 1
    1504:	08 95       	ret
    1506:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__fp_zero>
    150a:	67 2f       	mov	r22, r23
    150c:	78 2f       	mov	r23, r24
    150e:	88 27       	eor	r24, r24
    1510:	b8 5f       	subi	r27, 0xF8	; 248
    1512:	39 f0       	breq	.+14     	; 0x1522 <__fixunssfsi+0x4c>
    1514:	b9 3f       	cpi	r27, 0xF9	; 249
    1516:	cc f3       	brlt	.-14     	; 0x150a <__fixunssfsi+0x34>
    1518:	86 95       	lsr	r24
    151a:	77 95       	ror	r23
    151c:	67 95       	ror	r22
    151e:	b3 95       	inc	r27
    1520:	d9 f7       	brne	.-10     	; 0x1518 <__fixunssfsi+0x42>
    1522:	3e f4       	brtc	.+14     	; 0x1532 <__fixunssfsi+0x5c>
    1524:	90 95       	com	r25
    1526:	80 95       	com	r24
    1528:	70 95       	com	r23
    152a:	61 95       	neg	r22
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	8f 4f       	sbci	r24, 0xFF	; 255
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	08 95       	ret

00001534 <__floatunsisf>:
    1534:	e8 94       	clt
    1536:	09 c0       	rjmp	.+18     	; 0x154a <__floatsisf+0x12>

00001538 <__floatsisf>:
    1538:	97 fb       	bst	r25, 7
    153a:	3e f4       	brtc	.+14     	; 0x154a <__floatsisf+0x12>
    153c:	90 95       	com	r25
    153e:	80 95       	com	r24
    1540:	70 95       	com	r23
    1542:	61 95       	neg	r22
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	8f 4f       	sbci	r24, 0xFF	; 255
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	99 23       	and	r25, r25
    154c:	a9 f0       	breq	.+42     	; 0x1578 <__floatsisf+0x40>
    154e:	f9 2f       	mov	r31, r25
    1550:	96 e9       	ldi	r25, 0x96	; 150
    1552:	bb 27       	eor	r27, r27
    1554:	93 95       	inc	r25
    1556:	f6 95       	lsr	r31
    1558:	87 95       	ror	r24
    155a:	77 95       	ror	r23
    155c:	67 95       	ror	r22
    155e:	b7 95       	ror	r27
    1560:	f1 11       	cpse	r31, r1
    1562:	f8 cf       	rjmp	.-16     	; 0x1554 <__floatsisf+0x1c>
    1564:	fa f4       	brpl	.+62     	; 0x15a4 <__floatsisf+0x6c>
    1566:	bb 0f       	add	r27, r27
    1568:	11 f4       	brne	.+4      	; 0x156e <__floatsisf+0x36>
    156a:	60 ff       	sbrs	r22, 0
    156c:	1b c0       	rjmp	.+54     	; 0x15a4 <__floatsisf+0x6c>
    156e:	6f 5f       	subi	r22, 0xFF	; 255
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	8f 4f       	sbci	r24, 0xFF	; 255
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	16 c0       	rjmp	.+44     	; 0x15a4 <__floatsisf+0x6c>
    1578:	88 23       	and	r24, r24
    157a:	11 f0       	breq	.+4      	; 0x1580 <__floatsisf+0x48>
    157c:	96 e9       	ldi	r25, 0x96	; 150
    157e:	11 c0       	rjmp	.+34     	; 0x15a2 <__floatsisf+0x6a>
    1580:	77 23       	and	r23, r23
    1582:	21 f0       	breq	.+8      	; 0x158c <__floatsisf+0x54>
    1584:	9e e8       	ldi	r25, 0x8E	; 142
    1586:	87 2f       	mov	r24, r23
    1588:	76 2f       	mov	r23, r22
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <__floatsisf+0x5e>
    158c:	66 23       	and	r22, r22
    158e:	71 f0       	breq	.+28     	; 0x15ac <__floatsisf+0x74>
    1590:	96 e8       	ldi	r25, 0x86	; 134
    1592:	86 2f       	mov	r24, r22
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	2a f0       	brmi	.+10     	; 0x15a4 <__floatsisf+0x6c>
    159a:	9a 95       	dec	r25
    159c:	66 0f       	add	r22, r22
    159e:	77 1f       	adc	r23, r23
    15a0:	88 1f       	adc	r24, r24
    15a2:	da f7       	brpl	.-10     	; 0x159a <__floatsisf+0x62>
    15a4:	88 0f       	add	r24, r24
    15a6:	96 95       	lsr	r25
    15a8:	87 95       	ror	r24
    15aa:	97 f9       	bld	r25, 7
    15ac:	08 95       	ret

000015ae <floor>:
    15ae:	0e 94 85 0b 	call	0x170a	; 0x170a <__fp_trunc>
    15b2:	90 f0       	brcs	.+36     	; 0x15d8 <floor+0x2a>
    15b4:	9f 37       	cpi	r25, 0x7F	; 127
    15b6:	48 f4       	brcc	.+18     	; 0x15ca <floor+0x1c>
    15b8:	91 11       	cpse	r25, r1
    15ba:	16 f0       	brts	.+4      	; 0x15c0 <floor+0x12>
    15bc:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__fp_szero>
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	80 e8       	ldi	r24, 0x80	; 128
    15c6:	9f eb       	ldi	r25, 0xBF	; 191
    15c8:	08 95       	ret
    15ca:	26 f4       	brtc	.+8      	; 0x15d4 <floor+0x26>
    15cc:	1b 16       	cp	r1, r27
    15ce:	61 1d       	adc	r22, r1
    15d0:	71 1d       	adc	r23, r1
    15d2:	81 1d       	adc	r24, r1
    15d4:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__fp_mintl>
    15d8:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__fp_mpack>

000015dc <__fp_cmp>:
    15dc:	99 0f       	add	r25, r25
    15de:	00 08       	sbc	r0, r0
    15e0:	55 0f       	add	r21, r21
    15e2:	aa 0b       	sbc	r26, r26
    15e4:	e0 e8       	ldi	r30, 0x80	; 128
    15e6:	fe ef       	ldi	r31, 0xFE	; 254
    15e8:	16 16       	cp	r1, r22
    15ea:	17 06       	cpc	r1, r23
    15ec:	e8 07       	cpc	r30, r24
    15ee:	f9 07       	cpc	r31, r25
    15f0:	c0 f0       	brcs	.+48     	; 0x1622 <__fp_cmp+0x46>
    15f2:	12 16       	cp	r1, r18
    15f4:	13 06       	cpc	r1, r19
    15f6:	e4 07       	cpc	r30, r20
    15f8:	f5 07       	cpc	r31, r21
    15fa:	98 f0       	brcs	.+38     	; 0x1622 <__fp_cmp+0x46>
    15fc:	62 1b       	sub	r22, r18
    15fe:	73 0b       	sbc	r23, r19
    1600:	84 0b       	sbc	r24, r20
    1602:	95 0b       	sbc	r25, r21
    1604:	39 f4       	brne	.+14     	; 0x1614 <__fp_cmp+0x38>
    1606:	0a 26       	eor	r0, r26
    1608:	61 f0       	breq	.+24     	; 0x1622 <__fp_cmp+0x46>
    160a:	23 2b       	or	r18, r19
    160c:	24 2b       	or	r18, r20
    160e:	25 2b       	or	r18, r21
    1610:	21 f4       	brne	.+8      	; 0x161a <__fp_cmp+0x3e>
    1612:	08 95       	ret
    1614:	0a 26       	eor	r0, r26
    1616:	09 f4       	brne	.+2      	; 0x161a <__fp_cmp+0x3e>
    1618:	a1 40       	sbci	r26, 0x01	; 1
    161a:	a6 95       	lsr	r26
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	81 1d       	adc	r24, r1
    1620:	81 1d       	adc	r24, r1
    1622:	08 95       	ret

00001624 <__fp_inf>:
    1624:	97 f9       	bld	r25, 7
    1626:	9f 67       	ori	r25, 0x7F	; 127
    1628:	80 e8       	ldi	r24, 0x80	; 128
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	08 95       	ret

00001630 <__fp_mintl>:
    1630:	88 23       	and	r24, r24
    1632:	71 f4       	brne	.+28     	; 0x1650 <__fp_mintl+0x20>
    1634:	77 23       	and	r23, r23
    1636:	21 f0       	breq	.+8      	; 0x1640 <__fp_mintl+0x10>
    1638:	98 50       	subi	r25, 0x08	; 8
    163a:	87 2b       	or	r24, r23
    163c:	76 2f       	mov	r23, r22
    163e:	07 c0       	rjmp	.+14     	; 0x164e <__fp_mintl+0x1e>
    1640:	66 23       	and	r22, r22
    1642:	11 f4       	brne	.+4      	; 0x1648 <__fp_mintl+0x18>
    1644:	99 27       	eor	r25, r25
    1646:	0d c0       	rjmp	.+26     	; 0x1662 <__fp_mintl+0x32>
    1648:	90 51       	subi	r25, 0x10	; 16
    164a:	86 2b       	or	r24, r22
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	2a f0       	brmi	.+10     	; 0x165c <__fp_mintl+0x2c>
    1652:	9a 95       	dec	r25
    1654:	66 0f       	add	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	88 1f       	adc	r24, r24
    165a:	da f7       	brpl	.-10     	; 0x1652 <__fp_mintl+0x22>
    165c:	88 0f       	add	r24, r24
    165e:	96 95       	lsr	r25
    1660:	87 95       	ror	r24
    1662:	97 f9       	bld	r25, 7
    1664:	08 95       	ret

00001666 <__fp_mpack>:
    1666:	9f 3f       	cpi	r25, 0xFF	; 255
    1668:	31 f0       	breq	.+12     	; 0x1676 <__fp_mpack_finite+0xc>

0000166a <__fp_mpack_finite>:
    166a:	91 50       	subi	r25, 0x01	; 1
    166c:	20 f4       	brcc	.+8      	; 0x1676 <__fp_mpack_finite+0xc>
    166e:	87 95       	ror	r24
    1670:	77 95       	ror	r23
    1672:	67 95       	ror	r22
    1674:	b7 95       	ror	r27
    1676:	88 0f       	add	r24, r24
    1678:	91 1d       	adc	r25, r1
    167a:	96 95       	lsr	r25
    167c:	87 95       	ror	r24
    167e:	97 f9       	bld	r25, 7
    1680:	08 95       	ret

00001682 <__fp_nan>:
    1682:	9f ef       	ldi	r25, 0xFF	; 255
    1684:	80 ec       	ldi	r24, 0xC0	; 192
    1686:	08 95       	ret

00001688 <__fp_pscA>:
    1688:	00 24       	eor	r0, r0
    168a:	0a 94       	dec	r0
    168c:	16 16       	cp	r1, r22
    168e:	17 06       	cpc	r1, r23
    1690:	18 06       	cpc	r1, r24
    1692:	09 06       	cpc	r0, r25
    1694:	08 95       	ret

00001696 <__fp_pscB>:
    1696:	00 24       	eor	r0, r0
    1698:	0a 94       	dec	r0
    169a:	12 16       	cp	r1, r18
    169c:	13 06       	cpc	r1, r19
    169e:	14 06       	cpc	r1, r20
    16a0:	05 06       	cpc	r0, r21
    16a2:	08 95       	ret

000016a4 <__fp_round>:
    16a4:	09 2e       	mov	r0, r25
    16a6:	03 94       	inc	r0
    16a8:	00 0c       	add	r0, r0
    16aa:	11 f4       	brne	.+4      	; 0x16b0 <__fp_round+0xc>
    16ac:	88 23       	and	r24, r24
    16ae:	52 f0       	brmi	.+20     	; 0x16c4 <__fp_round+0x20>
    16b0:	bb 0f       	add	r27, r27
    16b2:	40 f4       	brcc	.+16     	; 0x16c4 <__fp_round+0x20>
    16b4:	bf 2b       	or	r27, r31
    16b6:	11 f4       	brne	.+4      	; 0x16bc <__fp_round+0x18>
    16b8:	60 ff       	sbrs	r22, 0
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <__fp_round+0x20>
    16bc:	6f 5f       	subi	r22, 0xFF	; 255
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	8f 4f       	sbci	r24, 0xFF	; 255
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	08 95       	ret

000016c6 <__fp_split3>:
    16c6:	57 fd       	sbrc	r21, 7
    16c8:	90 58       	subi	r25, 0x80	; 128
    16ca:	44 0f       	add	r20, r20
    16cc:	55 1f       	adc	r21, r21
    16ce:	59 f0       	breq	.+22     	; 0x16e6 <__fp_splitA+0x10>
    16d0:	5f 3f       	cpi	r21, 0xFF	; 255
    16d2:	71 f0       	breq	.+28     	; 0x16f0 <__fp_splitA+0x1a>
    16d4:	47 95       	ror	r20

000016d6 <__fp_splitA>:
    16d6:	88 0f       	add	r24, r24
    16d8:	97 fb       	bst	r25, 7
    16da:	99 1f       	adc	r25, r25
    16dc:	61 f0       	breq	.+24     	; 0x16f6 <__fp_splitA+0x20>
    16de:	9f 3f       	cpi	r25, 0xFF	; 255
    16e0:	79 f0       	breq	.+30     	; 0x1700 <__fp_splitA+0x2a>
    16e2:	87 95       	ror	r24
    16e4:	08 95       	ret
    16e6:	12 16       	cp	r1, r18
    16e8:	13 06       	cpc	r1, r19
    16ea:	14 06       	cpc	r1, r20
    16ec:	55 1f       	adc	r21, r21
    16ee:	f2 cf       	rjmp	.-28     	; 0x16d4 <__fp_split3+0xe>
    16f0:	46 95       	lsr	r20
    16f2:	f1 df       	rcall	.-30     	; 0x16d6 <__fp_splitA>
    16f4:	08 c0       	rjmp	.+16     	; 0x1706 <__fp_splitA+0x30>
    16f6:	16 16       	cp	r1, r22
    16f8:	17 06       	cpc	r1, r23
    16fa:	18 06       	cpc	r1, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	f1 cf       	rjmp	.-30     	; 0x16e2 <__fp_splitA+0xc>
    1700:	86 95       	lsr	r24
    1702:	71 05       	cpc	r23, r1
    1704:	61 05       	cpc	r22, r1
    1706:	08 94       	sec
    1708:	08 95       	ret

0000170a <__fp_trunc>:
    170a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__fp_splitA>
    170e:	a0 f0       	brcs	.+40     	; 0x1738 <__fp_trunc+0x2e>
    1710:	be e7       	ldi	r27, 0x7E	; 126
    1712:	b9 17       	cp	r27, r25
    1714:	88 f4       	brcc	.+34     	; 0x1738 <__fp_trunc+0x2e>
    1716:	bb 27       	eor	r27, r27
    1718:	9f 38       	cpi	r25, 0x8F	; 143
    171a:	60 f4       	brcc	.+24     	; 0x1734 <__fp_trunc+0x2a>
    171c:	16 16       	cp	r1, r22
    171e:	b1 1d       	adc	r27, r1
    1720:	67 2f       	mov	r22, r23
    1722:	78 2f       	mov	r23, r24
    1724:	88 27       	eor	r24, r24
    1726:	98 5f       	subi	r25, 0xF8	; 248
    1728:	f7 cf       	rjmp	.-18     	; 0x1718 <__fp_trunc+0xe>
    172a:	86 95       	lsr	r24
    172c:	77 95       	ror	r23
    172e:	67 95       	ror	r22
    1730:	b1 1d       	adc	r27, r1
    1732:	93 95       	inc	r25
    1734:	96 39       	cpi	r25, 0x96	; 150
    1736:	c8 f3       	brcs	.-14     	; 0x172a <__fp_trunc+0x20>
    1738:	08 95       	ret

0000173a <__fp_zero>:
    173a:	e8 94       	clt

0000173c <__fp_szero>:
    173c:	bb 27       	eor	r27, r27
    173e:	66 27       	eor	r22, r22
    1740:	77 27       	eor	r23, r23
    1742:	cb 01       	movw	r24, r22
    1744:	97 f9       	bld	r25, 7
    1746:	08 95       	ret

00001748 <__gesf2>:
    1748:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__fp_cmp>
    174c:	08 f4       	brcc	.+2      	; 0x1750 <__gesf2+0x8>
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	08 95       	ret

00001752 <__mulsf3>:
    1752:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__mulsf3x>
    1756:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_round>
    175a:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_pscA>
    175e:	38 f0       	brcs	.+14     	; 0x176e <__mulsf3+0x1c>
    1760:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__fp_pscB>
    1764:	20 f0       	brcs	.+8      	; 0x176e <__mulsf3+0x1c>
    1766:	95 23       	and	r25, r21
    1768:	11 f0       	breq	.+4      	; 0x176e <__mulsf3+0x1c>
    176a:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_inf>
    176e:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__fp_nan>
    1772:	11 24       	eor	r1, r1
    1774:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__fp_szero>

00001778 <__mulsf3x>:
    1778:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__fp_split3>
    177c:	70 f3       	brcs	.-36     	; 0x175a <__mulsf3+0x8>

0000177e <__mulsf3_pse>:
    177e:	95 9f       	mul	r25, r21
    1780:	c1 f3       	breq	.-16     	; 0x1772 <__mulsf3+0x20>
    1782:	95 0f       	add	r25, r21
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	55 1f       	adc	r21, r21
    1788:	62 9f       	mul	r22, r18
    178a:	f0 01       	movw	r30, r0
    178c:	72 9f       	mul	r23, r18
    178e:	bb 27       	eor	r27, r27
    1790:	f0 0d       	add	r31, r0
    1792:	b1 1d       	adc	r27, r1
    1794:	63 9f       	mul	r22, r19
    1796:	aa 27       	eor	r26, r26
    1798:	f0 0d       	add	r31, r0
    179a:	b1 1d       	adc	r27, r1
    179c:	aa 1f       	adc	r26, r26
    179e:	64 9f       	mul	r22, r20
    17a0:	66 27       	eor	r22, r22
    17a2:	b0 0d       	add	r27, r0
    17a4:	a1 1d       	adc	r26, r1
    17a6:	66 1f       	adc	r22, r22
    17a8:	82 9f       	mul	r24, r18
    17aa:	22 27       	eor	r18, r18
    17ac:	b0 0d       	add	r27, r0
    17ae:	a1 1d       	adc	r26, r1
    17b0:	62 1f       	adc	r22, r18
    17b2:	73 9f       	mul	r23, r19
    17b4:	b0 0d       	add	r27, r0
    17b6:	a1 1d       	adc	r26, r1
    17b8:	62 1f       	adc	r22, r18
    17ba:	83 9f       	mul	r24, r19
    17bc:	a0 0d       	add	r26, r0
    17be:	61 1d       	adc	r22, r1
    17c0:	22 1f       	adc	r18, r18
    17c2:	74 9f       	mul	r23, r20
    17c4:	33 27       	eor	r19, r19
    17c6:	a0 0d       	add	r26, r0
    17c8:	61 1d       	adc	r22, r1
    17ca:	23 1f       	adc	r18, r19
    17cc:	84 9f       	mul	r24, r20
    17ce:	60 0d       	add	r22, r0
    17d0:	21 1d       	adc	r18, r1
    17d2:	82 2f       	mov	r24, r18
    17d4:	76 2f       	mov	r23, r22
    17d6:	6a 2f       	mov	r22, r26
    17d8:	11 24       	eor	r1, r1
    17da:	9f 57       	subi	r25, 0x7F	; 127
    17dc:	50 40       	sbci	r21, 0x00	; 0
    17de:	9a f0       	brmi	.+38     	; 0x1806 <__mulsf3_pse+0x88>
    17e0:	f1 f0       	breq	.+60     	; 0x181e <__mulsf3_pse+0xa0>
    17e2:	88 23       	and	r24, r24
    17e4:	4a f0       	brmi	.+18     	; 0x17f8 <__mulsf3_pse+0x7a>
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	bb 1f       	adc	r27, r27
    17ec:	66 1f       	adc	r22, r22
    17ee:	77 1f       	adc	r23, r23
    17f0:	88 1f       	adc	r24, r24
    17f2:	91 50       	subi	r25, 0x01	; 1
    17f4:	50 40       	sbci	r21, 0x00	; 0
    17f6:	a9 f7       	brne	.-22     	; 0x17e2 <__mulsf3_pse+0x64>
    17f8:	9e 3f       	cpi	r25, 0xFE	; 254
    17fa:	51 05       	cpc	r21, r1
    17fc:	80 f0       	brcs	.+32     	; 0x181e <__mulsf3_pse+0xa0>
    17fe:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_inf>
    1802:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__fp_szero>
    1806:	5f 3f       	cpi	r21, 0xFF	; 255
    1808:	e4 f3       	brlt	.-8      	; 0x1802 <__mulsf3_pse+0x84>
    180a:	98 3e       	cpi	r25, 0xE8	; 232
    180c:	d4 f3       	brlt	.-12     	; 0x1802 <__mulsf3_pse+0x84>
    180e:	86 95       	lsr	r24
    1810:	77 95       	ror	r23
    1812:	67 95       	ror	r22
    1814:	b7 95       	ror	r27
    1816:	f7 95       	ror	r31
    1818:	e7 95       	ror	r30
    181a:	9f 5f       	subi	r25, 0xFF	; 255
    181c:	c1 f7       	brne	.-16     	; 0x180e <__mulsf3_pse+0x90>
    181e:	fe 2b       	or	r31, r30
    1820:	88 0f       	add	r24, r24
    1822:	91 1d       	adc	r25, r1
    1824:	96 95       	lsr	r25
    1826:	87 95       	ror	r24
    1828:	97 f9       	bld	r25, 7
    182a:	08 95       	ret

0000182c <malloc>:
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	91 05       	cpc	r25, r1
    1834:	10 f4       	brcc	.+4      	; 0x183a <malloc+0xe>
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	e0 91 31 03 	lds	r30, 0x0331
    183e:	f0 91 32 03 	lds	r31, 0x0332
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	c0 e0       	ldi	r28, 0x00	; 0
    1848:	d0 e0       	ldi	r29, 0x00	; 0
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	11 f1       	breq	.+68     	; 0x1892 <malloc+0x66>
    184e:	40 81       	ld	r20, Z
    1850:	51 81       	ldd	r21, Z+1	; 0x01
    1852:	48 17       	cp	r20, r24
    1854:	59 07       	cpc	r21, r25
    1856:	c0 f0       	brcs	.+48     	; 0x1888 <malloc+0x5c>
    1858:	48 17       	cp	r20, r24
    185a:	59 07       	cpc	r21, r25
    185c:	61 f4       	brne	.+24     	; 0x1876 <malloc+0x4a>
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	20 97       	sbiw	r28, 0x00	; 0
    1864:	19 f0       	breq	.+6      	; 0x186c <malloc+0x40>
    1866:	9b 83       	std	Y+3, r25	; 0x03
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	2b c0       	rjmp	.+86     	; 0x18c2 <malloc+0x96>
    186c:	90 93 32 03 	sts	0x0332, r25
    1870:	80 93 31 03 	sts	0x0331, r24
    1874:	26 c0       	rjmp	.+76     	; 0x18c2 <malloc+0x96>
    1876:	21 15       	cp	r18, r1
    1878:	31 05       	cpc	r19, r1
    187a:	19 f0       	breq	.+6      	; 0x1882 <malloc+0x56>
    187c:	42 17       	cp	r20, r18
    187e:	53 07       	cpc	r21, r19
    1880:	18 f4       	brcc	.+6      	; 0x1888 <malloc+0x5c>
    1882:	9a 01       	movw	r18, r20
    1884:	be 01       	movw	r22, r28
    1886:	df 01       	movw	r26, r30
    1888:	ef 01       	movw	r28, r30
    188a:	02 80       	ldd	r0, Z+2	; 0x02
    188c:	f3 81       	ldd	r31, Z+3	; 0x03
    188e:	e0 2d       	mov	r30, r0
    1890:	dc cf       	rjmp	.-72     	; 0x184a <malloc+0x1e>
    1892:	21 15       	cp	r18, r1
    1894:	31 05       	cpc	r19, r1
    1896:	09 f1       	breq	.+66     	; 0x18da <malloc+0xae>
    1898:	28 1b       	sub	r18, r24
    189a:	39 0b       	sbc	r19, r25
    189c:	24 30       	cpi	r18, 0x04	; 4
    189e:	31 05       	cpc	r19, r1
    18a0:	90 f4       	brcc	.+36     	; 0x18c6 <malloc+0x9a>
    18a2:	12 96       	adiw	r26, 0x02	; 2
    18a4:	8d 91       	ld	r24, X+
    18a6:	9c 91       	ld	r25, X
    18a8:	13 97       	sbiw	r26, 0x03	; 3
    18aa:	61 15       	cp	r22, r1
    18ac:	71 05       	cpc	r23, r1
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <malloc+0x8c>
    18b0:	fb 01       	movw	r30, r22
    18b2:	93 83       	std	Z+3, r25	; 0x03
    18b4:	82 83       	std	Z+2, r24	; 0x02
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <malloc+0x94>
    18b8:	90 93 32 03 	sts	0x0332, r25
    18bc:	80 93 31 03 	sts	0x0331, r24
    18c0:	fd 01       	movw	r30, r26
    18c2:	32 96       	adiw	r30, 0x02	; 2
    18c4:	44 c0       	rjmp	.+136    	; 0x194e <malloc+0x122>
    18c6:	fd 01       	movw	r30, r26
    18c8:	e2 0f       	add	r30, r18
    18ca:	f3 1f       	adc	r31, r19
    18cc:	81 93       	st	Z+, r24
    18ce:	91 93       	st	Z+, r25
    18d0:	22 50       	subi	r18, 0x02	; 2
    18d2:	31 09       	sbc	r19, r1
    18d4:	2d 93       	st	X+, r18
    18d6:	3c 93       	st	X, r19
    18d8:	3a c0       	rjmp	.+116    	; 0x194e <malloc+0x122>
    18da:	20 91 2f 03 	lds	r18, 0x032F
    18de:	30 91 30 03 	lds	r19, 0x0330
    18e2:	23 2b       	or	r18, r19
    18e4:	41 f4       	brne	.+16     	; 0x18f6 <malloc+0xca>
    18e6:	20 91 62 00 	lds	r18, 0x0062
    18ea:	30 91 63 00 	lds	r19, 0x0063
    18ee:	30 93 30 03 	sts	0x0330, r19
    18f2:	20 93 2f 03 	sts	0x032F, r18
    18f6:	20 91 60 00 	lds	r18, 0x0060
    18fa:	30 91 61 00 	lds	r19, 0x0061
    18fe:	21 15       	cp	r18, r1
    1900:	31 05       	cpc	r19, r1
    1902:	41 f4       	brne	.+16     	; 0x1914 <malloc+0xe8>
    1904:	2d b7       	in	r18, 0x3d	; 61
    1906:	3e b7       	in	r19, 0x3e	; 62
    1908:	40 91 64 00 	lds	r20, 0x0064
    190c:	50 91 65 00 	lds	r21, 0x0065
    1910:	24 1b       	sub	r18, r20
    1912:	35 0b       	sbc	r19, r21
    1914:	e0 91 2f 03 	lds	r30, 0x032F
    1918:	f0 91 30 03 	lds	r31, 0x0330
    191c:	e2 17       	cp	r30, r18
    191e:	f3 07       	cpc	r31, r19
    1920:	a0 f4       	brcc	.+40     	; 0x194a <malloc+0x11e>
    1922:	2e 1b       	sub	r18, r30
    1924:	3f 0b       	sbc	r19, r31
    1926:	28 17       	cp	r18, r24
    1928:	39 07       	cpc	r19, r25
    192a:	78 f0       	brcs	.+30     	; 0x194a <malloc+0x11e>
    192c:	ac 01       	movw	r20, r24
    192e:	4e 5f       	subi	r20, 0xFE	; 254
    1930:	5f 4f       	sbci	r21, 0xFF	; 255
    1932:	24 17       	cp	r18, r20
    1934:	35 07       	cpc	r19, r21
    1936:	48 f0       	brcs	.+18     	; 0x194a <malloc+0x11e>
    1938:	4e 0f       	add	r20, r30
    193a:	5f 1f       	adc	r21, r31
    193c:	50 93 30 03 	sts	0x0330, r21
    1940:	40 93 2f 03 	sts	0x032F, r20
    1944:	81 93       	st	Z+, r24
    1946:	91 93       	st	Z+, r25
    1948:	02 c0       	rjmp	.+4      	; 0x194e <malloc+0x122>
    194a:	e0 e0       	ldi	r30, 0x00	; 0
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	cf 01       	movw	r24, r30
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	08 95       	ret

00001956 <free>:
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	09 f4       	brne	.+2      	; 0x1964 <free+0xe>
    1962:	8c c0       	rjmp	.+280    	; 0x1a7c <free+0x126>
    1964:	fc 01       	movw	r30, r24
    1966:	32 97       	sbiw	r30, 0x02	; 2
    1968:	13 82       	std	Z+3, r1	; 0x03
    196a:	12 82       	std	Z+2, r1	; 0x02
    196c:	00 91 31 03 	lds	r16, 0x0331
    1970:	10 91 32 03 	lds	r17, 0x0332
    1974:	01 15       	cp	r16, r1
    1976:	11 05       	cpc	r17, r1
    1978:	81 f4       	brne	.+32     	; 0x199a <free+0x44>
    197a:	20 81       	ld	r18, Z
    197c:	31 81       	ldd	r19, Z+1	; 0x01
    197e:	82 0f       	add	r24, r18
    1980:	93 1f       	adc	r25, r19
    1982:	20 91 2f 03 	lds	r18, 0x032F
    1986:	30 91 30 03 	lds	r19, 0x0330
    198a:	28 17       	cp	r18, r24
    198c:	39 07       	cpc	r19, r25
    198e:	79 f5       	brne	.+94     	; 0x19ee <free+0x98>
    1990:	f0 93 30 03 	sts	0x0330, r31
    1994:	e0 93 2f 03 	sts	0x032F, r30
    1998:	71 c0       	rjmp	.+226    	; 0x1a7c <free+0x126>
    199a:	d8 01       	movw	r26, r16
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	ae 17       	cp	r26, r30
    19a2:	bf 07       	cpc	r27, r31
    19a4:	50 f4       	brcc	.+20     	; 0x19ba <free+0x64>
    19a6:	12 96       	adiw	r26, 0x02	; 2
    19a8:	2d 91       	ld	r18, X+
    19aa:	3c 91       	ld	r19, X
    19ac:	13 97       	sbiw	r26, 0x03	; 3
    19ae:	ad 01       	movw	r20, r26
    19b0:	21 15       	cp	r18, r1
    19b2:	31 05       	cpc	r19, r1
    19b4:	09 f1       	breq	.+66     	; 0x19f8 <free+0xa2>
    19b6:	d9 01       	movw	r26, r18
    19b8:	f3 cf       	rjmp	.-26     	; 0x19a0 <free+0x4a>
    19ba:	9d 01       	movw	r18, r26
    19bc:	da 01       	movw	r26, r20
    19be:	33 83       	std	Z+3, r19	; 0x03
    19c0:	22 83       	std	Z+2, r18	; 0x02
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	86 0f       	add	r24, r22
    19c8:	97 1f       	adc	r25, r23
    19ca:	82 17       	cp	r24, r18
    19cc:	93 07       	cpc	r25, r19
    19ce:	69 f4       	brne	.+26     	; 0x19ea <free+0x94>
    19d0:	ec 01       	movw	r28, r24
    19d2:	28 81       	ld	r18, Y
    19d4:	39 81       	ldd	r19, Y+1	; 0x01
    19d6:	26 0f       	add	r18, r22
    19d8:	37 1f       	adc	r19, r23
    19da:	2e 5f       	subi	r18, 0xFE	; 254
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	31 83       	std	Z+1, r19	; 0x01
    19e0:	20 83       	st	Z, r18
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	9b 81       	ldd	r25, Y+3	; 0x03
    19e6:	93 83       	std	Z+3, r25	; 0x03
    19e8:	82 83       	std	Z+2, r24	; 0x02
    19ea:	45 2b       	or	r20, r21
    19ec:	29 f4       	brne	.+10     	; 0x19f8 <free+0xa2>
    19ee:	f0 93 32 03 	sts	0x0332, r31
    19f2:	e0 93 31 03 	sts	0x0331, r30
    19f6:	42 c0       	rjmp	.+132    	; 0x1a7c <free+0x126>
    19f8:	13 96       	adiw	r26, 0x03	; 3
    19fa:	fc 93       	st	X, r31
    19fc:	ee 93       	st	-X, r30
    19fe:	12 97       	sbiw	r26, 0x02	; 2
    1a00:	ed 01       	movw	r28, r26
    1a02:	49 91       	ld	r20, Y+
    1a04:	59 91       	ld	r21, Y+
    1a06:	9e 01       	movw	r18, r28
    1a08:	24 0f       	add	r18, r20
    1a0a:	35 1f       	adc	r19, r21
    1a0c:	e2 17       	cp	r30, r18
    1a0e:	f3 07       	cpc	r31, r19
    1a10:	71 f4       	brne	.+28     	; 0x1a2e <free+0xd8>
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	84 0f       	add	r24, r20
    1a18:	95 1f       	adc	r25, r21
    1a1a:	02 96       	adiw	r24, 0x02	; 2
    1a1c:	11 96       	adiw	r26, 0x01	; 1
    1a1e:	9c 93       	st	X, r25
    1a20:	8e 93       	st	-X, r24
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	13 96       	adiw	r26, 0x03	; 3
    1a28:	9c 93       	st	X, r25
    1a2a:	8e 93       	st	-X, r24
    1a2c:	12 97       	sbiw	r26, 0x02	; 2
    1a2e:	e0 e0       	ldi	r30, 0x00	; 0
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	d8 01       	movw	r26, r16
    1a34:	12 96       	adiw	r26, 0x02	; 2
    1a36:	8d 91       	ld	r24, X+
    1a38:	9c 91       	ld	r25, X
    1a3a:	13 97       	sbiw	r26, 0x03	; 3
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	19 f0       	breq	.+6      	; 0x1a46 <free+0xf0>
    1a40:	f8 01       	movw	r30, r16
    1a42:	8c 01       	movw	r16, r24
    1a44:	f6 cf       	rjmp	.-20     	; 0x1a32 <free+0xdc>
    1a46:	8d 91       	ld	r24, X+
    1a48:	9c 91       	ld	r25, X
    1a4a:	98 01       	movw	r18, r16
    1a4c:	2e 5f       	subi	r18, 0xFE	; 254
    1a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a50:	82 0f       	add	r24, r18
    1a52:	93 1f       	adc	r25, r19
    1a54:	20 91 2f 03 	lds	r18, 0x032F
    1a58:	30 91 30 03 	lds	r19, 0x0330
    1a5c:	28 17       	cp	r18, r24
    1a5e:	39 07       	cpc	r19, r25
    1a60:	69 f4       	brne	.+26     	; 0x1a7c <free+0x126>
    1a62:	30 97       	sbiw	r30, 0x00	; 0
    1a64:	29 f4       	brne	.+10     	; 0x1a70 <free+0x11a>
    1a66:	10 92 32 03 	sts	0x0332, r1
    1a6a:	10 92 31 03 	sts	0x0331, r1
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <free+0x11e>
    1a70:	13 82       	std	Z+3, r1	; 0x03
    1a72:	12 82       	std	Z+2, r1	; 0x02
    1a74:	10 93 30 03 	sts	0x0330, r17
    1a78:	00 93 2f 03 	sts	0x032F, r16
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	08 95       	ret

00001a86 <strncpy>:
    1a86:	fb 01       	movw	r30, r22
    1a88:	dc 01       	movw	r26, r24
    1a8a:	41 50       	subi	r20, 0x01	; 1
    1a8c:	50 40       	sbci	r21, 0x00	; 0
    1a8e:	48 f0       	brcs	.+18     	; 0x1aa2 <strncpy+0x1c>
    1a90:	01 90       	ld	r0, Z+
    1a92:	0d 92       	st	X+, r0
    1a94:	00 20       	and	r0, r0
    1a96:	c9 f7       	brne	.-14     	; 0x1a8a <strncpy+0x4>
    1a98:	01 c0       	rjmp	.+2      	; 0x1a9c <strncpy+0x16>
    1a9a:	1d 92       	st	X+, r1
    1a9c:	41 50       	subi	r20, 0x01	; 1
    1a9e:	50 40       	sbci	r21, 0x00	; 0
    1aa0:	e0 f7       	brcc	.-8      	; 0x1a9a <strncpy+0x14>
    1aa2:	08 95       	ret

00001aa4 <sprintf>:
    1aa4:	ae e0       	ldi	r26, 0x0E	; 14
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e8 e5       	ldi	r30, 0x58	; 88
    1aaa:	fd e0       	ldi	r31, 0x0D	; 13
    1aac:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__prologue_saves__+0x1c>
    1ab0:	0d 89       	ldd	r16, Y+21	; 0x15
    1ab2:	1e 89       	ldd	r17, Y+22	; 0x16
    1ab4:	86 e0       	ldi	r24, 0x06	; 6
    1ab6:	8c 83       	std	Y+4, r24	; 0x04
    1ab8:	1a 83       	std	Y+2, r17	; 0x02
    1aba:	09 83       	std	Y+1, r16	; 0x01
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	9f e7       	ldi	r25, 0x7F	; 127
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	ae 01       	movw	r20, r28
    1ac6:	47 5e       	subi	r20, 0xE7	; 231
    1ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aca:	6f 89       	ldd	r22, Y+23	; 0x17
    1acc:	78 8d       	ldd	r23, Y+24	; 0x18
    1ace:	ce 01       	movw	r24, r28
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <vfprintf>
    1ad6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ad8:	38 85       	ldd	r19, Y+8	; 0x08
    1ada:	f8 01       	movw	r30, r16
    1adc:	e2 0f       	add	r30, r18
    1ade:	f3 1f       	adc	r31, r19
    1ae0:	10 82       	st	Z, r1
    1ae2:	2e 96       	adiw	r28, 0x0e	; 14
    1ae4:	e4 e0       	ldi	r30, 0x04	; 4
    1ae6:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__epilogue_restores__+0x1c>

00001aea <vfprintf>:
    1aea:	ac e0       	ldi	r26, 0x0C	; 12
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	eb e7       	ldi	r30, 0x7B	; 123
    1af0:	fd e0       	ldi	r31, 0x0D	; 13
    1af2:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__>
    1af6:	7c 01       	movw	r14, r24
    1af8:	6b 01       	movw	r12, r22
    1afa:	8a 01       	movw	r16, r20
    1afc:	fc 01       	movw	r30, r24
    1afe:	17 82       	std	Z+7, r1	; 0x07
    1b00:	16 82       	std	Z+6, r1	; 0x06
    1b02:	83 81       	ldd	r24, Z+3	; 0x03
    1b04:	81 ff       	sbrs	r24, 1
    1b06:	bd c1       	rjmp	.+890    	; 0x1e82 <vfprintf+0x398>
    1b08:	ce 01       	movw	r24, r28
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	4c 01       	movw	r8, r24
    1b0e:	f7 01       	movw	r30, r14
    1b10:	93 81       	ldd	r25, Z+3	; 0x03
    1b12:	f6 01       	movw	r30, r12
    1b14:	93 fd       	sbrc	r25, 3
    1b16:	85 91       	lpm	r24, Z+
    1b18:	93 ff       	sbrs	r25, 3
    1b1a:	81 91       	ld	r24, Z+
    1b1c:	6f 01       	movw	r12, r30
    1b1e:	88 23       	and	r24, r24
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <vfprintf+0x3a>
    1b22:	ab c1       	rjmp	.+854    	; 0x1e7a <vfprintf+0x390>
    1b24:	85 32       	cpi	r24, 0x25	; 37
    1b26:	39 f4       	brne	.+14     	; 0x1b36 <vfprintf+0x4c>
    1b28:	93 fd       	sbrc	r25, 3
    1b2a:	85 91       	lpm	r24, Z+
    1b2c:	93 ff       	sbrs	r25, 3
    1b2e:	81 91       	ld	r24, Z+
    1b30:	6f 01       	movw	r12, r30
    1b32:	85 32       	cpi	r24, 0x25	; 37
    1b34:	29 f4       	brne	.+10     	; 0x1b40 <vfprintf+0x56>
    1b36:	b7 01       	movw	r22, r14
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <fputc>
    1b3e:	e7 cf       	rjmp	.-50     	; 0x1b0e <vfprintf+0x24>
    1b40:	51 2c       	mov	r5, r1
    1b42:	31 2c       	mov	r3, r1
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	20 32       	cpi	r18, 0x20	; 32
    1b48:	a0 f4       	brcc	.+40     	; 0x1b72 <vfprintf+0x88>
    1b4a:	8b 32       	cpi	r24, 0x2B	; 43
    1b4c:	69 f0       	breq	.+26     	; 0x1b68 <vfprintf+0x7e>
    1b4e:	30 f4       	brcc	.+12     	; 0x1b5c <vfprintf+0x72>
    1b50:	80 32       	cpi	r24, 0x20	; 32
    1b52:	59 f0       	breq	.+22     	; 0x1b6a <vfprintf+0x80>
    1b54:	83 32       	cpi	r24, 0x23	; 35
    1b56:	69 f4       	brne	.+26     	; 0x1b72 <vfprintf+0x88>
    1b58:	20 61       	ori	r18, 0x10	; 16
    1b5a:	2c c0       	rjmp	.+88     	; 0x1bb4 <vfprintf+0xca>
    1b5c:	8d 32       	cpi	r24, 0x2D	; 45
    1b5e:	39 f0       	breq	.+14     	; 0x1b6e <vfprintf+0x84>
    1b60:	80 33       	cpi	r24, 0x30	; 48
    1b62:	39 f4       	brne	.+14     	; 0x1b72 <vfprintf+0x88>
    1b64:	21 60       	ori	r18, 0x01	; 1
    1b66:	26 c0       	rjmp	.+76     	; 0x1bb4 <vfprintf+0xca>
    1b68:	22 60       	ori	r18, 0x02	; 2
    1b6a:	24 60       	ori	r18, 0x04	; 4
    1b6c:	23 c0       	rjmp	.+70     	; 0x1bb4 <vfprintf+0xca>
    1b6e:	28 60       	ori	r18, 0x08	; 8
    1b70:	21 c0       	rjmp	.+66     	; 0x1bb4 <vfprintf+0xca>
    1b72:	27 fd       	sbrc	r18, 7
    1b74:	27 c0       	rjmp	.+78     	; 0x1bc4 <vfprintf+0xda>
    1b76:	30 ed       	ldi	r19, 0xD0	; 208
    1b78:	38 0f       	add	r19, r24
    1b7a:	3a 30       	cpi	r19, 0x0A	; 10
    1b7c:	78 f4       	brcc	.+30     	; 0x1b9c <vfprintf+0xb2>
    1b7e:	26 ff       	sbrs	r18, 6
    1b80:	06 c0       	rjmp	.+12     	; 0x1b8e <vfprintf+0xa4>
    1b82:	fa e0       	ldi	r31, 0x0A	; 10
    1b84:	5f 9e       	mul	r5, r31
    1b86:	30 0d       	add	r19, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	53 2e       	mov	r5, r19
    1b8c:	13 c0       	rjmp	.+38     	; 0x1bb4 <vfprintf+0xca>
    1b8e:	8a e0       	ldi	r24, 0x0A	; 10
    1b90:	38 9e       	mul	r3, r24
    1b92:	30 0d       	add	r19, r0
    1b94:	11 24       	eor	r1, r1
    1b96:	33 2e       	mov	r3, r19
    1b98:	20 62       	ori	r18, 0x20	; 32
    1b9a:	0c c0       	rjmp	.+24     	; 0x1bb4 <vfprintf+0xca>
    1b9c:	8e 32       	cpi	r24, 0x2E	; 46
    1b9e:	21 f4       	brne	.+8      	; 0x1ba8 <vfprintf+0xbe>
    1ba0:	26 fd       	sbrc	r18, 6
    1ba2:	6b c1       	rjmp	.+726    	; 0x1e7a <vfprintf+0x390>
    1ba4:	20 64       	ori	r18, 0x40	; 64
    1ba6:	06 c0       	rjmp	.+12     	; 0x1bb4 <vfprintf+0xca>
    1ba8:	8c 36       	cpi	r24, 0x6C	; 108
    1baa:	11 f4       	brne	.+4      	; 0x1bb0 <vfprintf+0xc6>
    1bac:	20 68       	ori	r18, 0x80	; 128
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <vfprintf+0xca>
    1bb0:	88 36       	cpi	r24, 0x68	; 104
    1bb2:	41 f4       	brne	.+16     	; 0x1bc4 <vfprintf+0xda>
    1bb4:	f6 01       	movw	r30, r12
    1bb6:	93 fd       	sbrc	r25, 3
    1bb8:	85 91       	lpm	r24, Z+
    1bba:	93 ff       	sbrs	r25, 3
    1bbc:	81 91       	ld	r24, Z+
    1bbe:	6f 01       	movw	r12, r30
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	c1 cf       	rjmp	.-126    	; 0x1b46 <vfprintf+0x5c>
    1bc4:	98 2f       	mov	r25, r24
    1bc6:	9f 7d       	andi	r25, 0xDF	; 223
    1bc8:	95 54       	subi	r25, 0x45	; 69
    1bca:	93 30       	cpi	r25, 0x03	; 3
    1bcc:	28 f4       	brcc	.+10     	; 0x1bd8 <vfprintf+0xee>
    1bce:	0c 5f       	subi	r16, 0xFC	; 252
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	ff e3       	ldi	r31, 0x3F	; 63
    1bd4:	f9 83       	std	Y+1, r31	; 0x01
    1bd6:	0d c0       	rjmp	.+26     	; 0x1bf2 <vfprintf+0x108>
    1bd8:	83 36       	cpi	r24, 0x63	; 99
    1bda:	31 f0       	breq	.+12     	; 0x1be8 <vfprintf+0xfe>
    1bdc:	83 37       	cpi	r24, 0x73	; 115
    1bde:	71 f0       	breq	.+28     	; 0x1bfc <vfprintf+0x112>
    1be0:	83 35       	cpi	r24, 0x53	; 83
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <vfprintf+0xfc>
    1be4:	5b c0       	rjmp	.+182    	; 0x1c9c <vfprintf+0x1b2>
    1be6:	22 c0       	rjmp	.+68     	; 0x1c2c <vfprintf+0x142>
    1be8:	f8 01       	movw	r30, r16
    1bea:	80 81       	ld	r24, Z
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	0e 5f       	subi	r16, 0xFE	; 254
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	44 24       	eor	r4, r4
    1bf4:	43 94       	inc	r4
    1bf6:	51 2c       	mov	r5, r1
    1bf8:	54 01       	movw	r10, r8
    1bfa:	15 c0       	rjmp	.+42     	; 0x1c26 <vfprintf+0x13c>
    1bfc:	38 01       	movw	r6, r16
    1bfe:	f2 e0       	ldi	r31, 0x02	; 2
    1c00:	6f 0e       	add	r6, r31
    1c02:	71 1c       	adc	r7, r1
    1c04:	f8 01       	movw	r30, r16
    1c06:	a0 80       	ld	r10, Z
    1c08:	b1 80       	ldd	r11, Z+1	; 0x01
    1c0a:	26 ff       	sbrs	r18, 6
    1c0c:	03 c0       	rjmp	.+6      	; 0x1c14 <vfprintf+0x12a>
    1c0e:	65 2d       	mov	r22, r5
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <vfprintf+0x12e>
    1c14:	6f ef       	ldi	r22, 0xFF	; 255
    1c16:	7f ef       	ldi	r23, 0xFF	; 255
    1c18:	c5 01       	movw	r24, r10
    1c1a:	2c 87       	std	Y+12, r18	; 0x0c
    1c1c:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <strnlen>
    1c20:	2c 01       	movw	r4, r24
    1c22:	83 01       	movw	r16, r6
    1c24:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c26:	2f 77       	andi	r18, 0x7F	; 127
    1c28:	22 2e       	mov	r2, r18
    1c2a:	17 c0       	rjmp	.+46     	; 0x1c5a <vfprintf+0x170>
    1c2c:	38 01       	movw	r6, r16
    1c2e:	f2 e0       	ldi	r31, 0x02	; 2
    1c30:	6f 0e       	add	r6, r31
    1c32:	71 1c       	adc	r7, r1
    1c34:	f8 01       	movw	r30, r16
    1c36:	a0 80       	ld	r10, Z
    1c38:	b1 80       	ldd	r11, Z+1	; 0x01
    1c3a:	26 ff       	sbrs	r18, 6
    1c3c:	03 c0       	rjmp	.+6      	; 0x1c44 <vfprintf+0x15a>
    1c3e:	65 2d       	mov	r22, r5
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <vfprintf+0x15e>
    1c44:	6f ef       	ldi	r22, 0xFF	; 255
    1c46:	7f ef       	ldi	r23, 0xFF	; 255
    1c48:	c5 01       	movw	r24, r10
    1c4a:	2c 87       	std	Y+12, r18	; 0x0c
    1c4c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <strnlen_P>
    1c50:	2c 01       	movw	r4, r24
    1c52:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c54:	20 68       	ori	r18, 0x80	; 128
    1c56:	22 2e       	mov	r2, r18
    1c58:	83 01       	movw	r16, r6
    1c5a:	23 fc       	sbrc	r2, 3
    1c5c:	1b c0       	rjmp	.+54     	; 0x1c94 <vfprintf+0x1aa>
    1c5e:	83 2d       	mov	r24, r3
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	48 16       	cp	r4, r24
    1c64:	59 06       	cpc	r5, r25
    1c66:	b0 f4       	brcc	.+44     	; 0x1c94 <vfprintf+0x1aa>
    1c68:	b7 01       	movw	r22, r14
    1c6a:	80 e2       	ldi	r24, 0x20	; 32
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <fputc>
    1c72:	3a 94       	dec	r3
    1c74:	f4 cf       	rjmp	.-24     	; 0x1c5e <vfprintf+0x174>
    1c76:	f5 01       	movw	r30, r10
    1c78:	27 fc       	sbrc	r2, 7
    1c7a:	85 91       	lpm	r24, Z+
    1c7c:	27 fe       	sbrs	r2, 7
    1c7e:	81 91       	ld	r24, Z+
    1c80:	5f 01       	movw	r10, r30
    1c82:	b7 01       	movw	r22, r14
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <fputc>
    1c8a:	31 10       	cpse	r3, r1
    1c8c:	3a 94       	dec	r3
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	4f 1a       	sub	r4, r31
    1c92:	51 08       	sbc	r5, r1
    1c94:	41 14       	cp	r4, r1
    1c96:	51 04       	cpc	r5, r1
    1c98:	71 f7       	brne	.-36     	; 0x1c76 <vfprintf+0x18c>
    1c9a:	e5 c0       	rjmp	.+458    	; 0x1e66 <vfprintf+0x37c>
    1c9c:	84 36       	cpi	r24, 0x64	; 100
    1c9e:	11 f0       	breq	.+4      	; 0x1ca4 <vfprintf+0x1ba>
    1ca0:	89 36       	cpi	r24, 0x69	; 105
    1ca2:	39 f5       	brne	.+78     	; 0x1cf2 <vfprintf+0x208>
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	27 ff       	sbrs	r18, 7
    1ca8:	07 c0       	rjmp	.+14     	; 0x1cb8 <vfprintf+0x1ce>
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	0c 5f       	subi	r16, 0xFC	; 252
    1cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb6:	08 c0       	rjmp	.+16     	; 0x1cc8 <vfprintf+0x1de>
    1cb8:	60 81       	ld	r22, Z
    1cba:	71 81       	ldd	r23, Z+1	; 0x01
    1cbc:	07 2e       	mov	r0, r23
    1cbe:	00 0c       	add	r0, r0
    1cc0:	88 0b       	sbc	r24, r24
    1cc2:	99 0b       	sbc	r25, r25
    1cc4:	0e 5f       	subi	r16, 0xFE	; 254
    1cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc8:	2f 76       	andi	r18, 0x6F	; 111
    1cca:	72 2e       	mov	r7, r18
    1ccc:	97 ff       	sbrs	r25, 7
    1cce:	09 c0       	rjmp	.+18     	; 0x1ce2 <vfprintf+0x1f8>
    1cd0:	90 95       	com	r25
    1cd2:	80 95       	com	r24
    1cd4:	70 95       	com	r23
    1cd6:	61 95       	neg	r22
    1cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cda:	8f 4f       	sbci	r24, 0xFF	; 255
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	20 68       	ori	r18, 0x80	; 128
    1ce0:	72 2e       	mov	r7, r18
    1ce2:	2a e0       	ldi	r18, 0x0A	; 10
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	a4 01       	movw	r20, r8
    1ce8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__ultoa_invert>
    1cec:	a8 2e       	mov	r10, r24
    1cee:	a8 18       	sub	r10, r8
    1cf0:	44 c0       	rjmp	.+136    	; 0x1d7a <vfprintf+0x290>
    1cf2:	85 37       	cpi	r24, 0x75	; 117
    1cf4:	29 f4       	brne	.+10     	; 0x1d00 <vfprintf+0x216>
    1cf6:	2f 7e       	andi	r18, 0xEF	; 239
    1cf8:	b2 2e       	mov	r11, r18
    1cfa:	2a e0       	ldi	r18, 0x0A	; 10
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	25 c0       	rjmp	.+74     	; 0x1d4a <vfprintf+0x260>
    1d00:	f2 2f       	mov	r31, r18
    1d02:	f9 7f       	andi	r31, 0xF9	; 249
    1d04:	bf 2e       	mov	r11, r31
    1d06:	8f 36       	cpi	r24, 0x6F	; 111
    1d08:	c1 f0       	breq	.+48     	; 0x1d3a <vfprintf+0x250>
    1d0a:	18 f4       	brcc	.+6      	; 0x1d12 <vfprintf+0x228>
    1d0c:	88 35       	cpi	r24, 0x58	; 88
    1d0e:	79 f0       	breq	.+30     	; 0x1d2e <vfprintf+0x244>
    1d10:	b4 c0       	rjmp	.+360    	; 0x1e7a <vfprintf+0x390>
    1d12:	80 37       	cpi	r24, 0x70	; 112
    1d14:	19 f0       	breq	.+6      	; 0x1d1c <vfprintf+0x232>
    1d16:	88 37       	cpi	r24, 0x78	; 120
    1d18:	21 f0       	breq	.+8      	; 0x1d22 <vfprintf+0x238>
    1d1a:	af c0       	rjmp	.+350    	; 0x1e7a <vfprintf+0x390>
    1d1c:	2f 2f       	mov	r18, r31
    1d1e:	20 61       	ori	r18, 0x10	; 16
    1d20:	b2 2e       	mov	r11, r18
    1d22:	b4 fe       	sbrs	r11, 4
    1d24:	0d c0       	rjmp	.+26     	; 0x1d40 <vfprintf+0x256>
    1d26:	8b 2d       	mov	r24, r11
    1d28:	84 60       	ori	r24, 0x04	; 4
    1d2a:	b8 2e       	mov	r11, r24
    1d2c:	09 c0       	rjmp	.+18     	; 0x1d40 <vfprintf+0x256>
    1d2e:	24 ff       	sbrs	r18, 4
    1d30:	0a c0       	rjmp	.+20     	; 0x1d46 <vfprintf+0x25c>
    1d32:	9f 2f       	mov	r25, r31
    1d34:	96 60       	ori	r25, 0x06	; 6
    1d36:	b9 2e       	mov	r11, r25
    1d38:	06 c0       	rjmp	.+12     	; 0x1d46 <vfprintf+0x25c>
    1d3a:	28 e0       	ldi	r18, 0x08	; 8
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	05 c0       	rjmp	.+10     	; 0x1d4a <vfprintf+0x260>
    1d40:	20 e1       	ldi	r18, 0x10	; 16
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <vfprintf+0x260>
    1d46:	20 e1       	ldi	r18, 0x10	; 16
    1d48:	32 e0       	ldi	r19, 0x02	; 2
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	b7 fe       	sbrs	r11, 7
    1d4e:	07 c0       	rjmp	.+14     	; 0x1d5e <vfprintf+0x274>
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	0c 5f       	subi	r16, 0xFC	; 252
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	06 c0       	rjmp	.+12     	; 0x1d6a <vfprintf+0x280>
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 5f       	subi	r16, 0xFE	; 254
    1d68:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6a:	a4 01       	movw	r20, r8
    1d6c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__ultoa_invert>
    1d70:	a8 2e       	mov	r10, r24
    1d72:	a8 18       	sub	r10, r8
    1d74:	fb 2d       	mov	r31, r11
    1d76:	ff 77       	andi	r31, 0x7F	; 127
    1d78:	7f 2e       	mov	r7, r31
    1d7a:	76 fe       	sbrs	r7, 6
    1d7c:	0b c0       	rjmp	.+22     	; 0x1d94 <vfprintf+0x2aa>
    1d7e:	37 2d       	mov	r19, r7
    1d80:	3e 7f       	andi	r19, 0xFE	; 254
    1d82:	a5 14       	cp	r10, r5
    1d84:	50 f4       	brcc	.+20     	; 0x1d9a <vfprintf+0x2b0>
    1d86:	74 fe       	sbrs	r7, 4
    1d88:	0a c0       	rjmp	.+20     	; 0x1d9e <vfprintf+0x2b4>
    1d8a:	72 fc       	sbrc	r7, 2
    1d8c:	08 c0       	rjmp	.+16     	; 0x1d9e <vfprintf+0x2b4>
    1d8e:	37 2d       	mov	r19, r7
    1d90:	3e 7e       	andi	r19, 0xEE	; 238
    1d92:	05 c0       	rjmp	.+10     	; 0x1d9e <vfprintf+0x2b4>
    1d94:	ba 2c       	mov	r11, r10
    1d96:	37 2d       	mov	r19, r7
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <vfprintf+0x2b6>
    1d9a:	ba 2c       	mov	r11, r10
    1d9c:	01 c0       	rjmp	.+2      	; 0x1da0 <vfprintf+0x2b6>
    1d9e:	b5 2c       	mov	r11, r5
    1da0:	34 ff       	sbrs	r19, 4
    1da2:	0d c0       	rjmp	.+26     	; 0x1dbe <vfprintf+0x2d4>
    1da4:	fe 01       	movw	r30, r28
    1da6:	ea 0d       	add	r30, r10
    1da8:	f1 1d       	adc	r31, r1
    1daa:	80 81       	ld	r24, Z
    1dac:	80 33       	cpi	r24, 0x30	; 48
    1dae:	11 f4       	brne	.+4      	; 0x1db4 <vfprintf+0x2ca>
    1db0:	39 7e       	andi	r19, 0xE9	; 233
    1db2:	09 c0       	rjmp	.+18     	; 0x1dc6 <vfprintf+0x2dc>
    1db4:	32 ff       	sbrs	r19, 2
    1db6:	06 c0       	rjmp	.+12     	; 0x1dc4 <vfprintf+0x2da>
    1db8:	b3 94       	inc	r11
    1dba:	b3 94       	inc	r11
    1dbc:	04 c0       	rjmp	.+8      	; 0x1dc6 <vfprintf+0x2dc>
    1dbe:	83 2f       	mov	r24, r19
    1dc0:	86 78       	andi	r24, 0x86	; 134
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <vfprintf+0x2dc>
    1dc4:	b3 94       	inc	r11
    1dc6:	33 fd       	sbrc	r19, 3
    1dc8:	13 c0       	rjmp	.+38     	; 0x1df0 <vfprintf+0x306>
    1dca:	30 ff       	sbrs	r19, 0
    1dcc:	06 c0       	rjmp	.+12     	; 0x1dda <vfprintf+0x2f0>
    1dce:	5a 2c       	mov	r5, r10
    1dd0:	b3 14       	cp	r11, r3
    1dd2:	18 f4       	brcc	.+6      	; 0x1dda <vfprintf+0x2f0>
    1dd4:	53 0c       	add	r5, r3
    1dd6:	5b 18       	sub	r5, r11
    1dd8:	b3 2c       	mov	r11, r3
    1dda:	b3 14       	cp	r11, r3
    1ddc:	68 f4       	brcc	.+26     	; 0x1df8 <vfprintf+0x30e>
    1dde:	b7 01       	movw	r22, r14
    1de0:	80 e2       	ldi	r24, 0x20	; 32
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	3c 87       	std	Y+12, r19	; 0x0c
    1de6:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <fputc>
    1dea:	b3 94       	inc	r11
    1dec:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dee:	f5 cf       	rjmp	.-22     	; 0x1dda <vfprintf+0x2f0>
    1df0:	b3 14       	cp	r11, r3
    1df2:	10 f4       	brcc	.+4      	; 0x1df8 <vfprintf+0x30e>
    1df4:	3b 18       	sub	r3, r11
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <vfprintf+0x310>
    1df8:	31 2c       	mov	r3, r1
    1dfa:	34 ff       	sbrs	r19, 4
    1dfc:	12 c0       	rjmp	.+36     	; 0x1e22 <vfprintf+0x338>
    1dfe:	b7 01       	movw	r22, r14
    1e00:	80 e3       	ldi	r24, 0x30	; 48
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	3c 87       	std	Y+12, r19	; 0x0c
    1e06:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <fputc>
    1e0a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e0c:	32 ff       	sbrs	r19, 2
    1e0e:	17 c0       	rjmp	.+46     	; 0x1e3e <vfprintf+0x354>
    1e10:	31 fd       	sbrc	r19, 1
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <vfprintf+0x330>
    1e14:	88 e7       	ldi	r24, 0x78	; 120
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <vfprintf+0x334>
    1e1a:	88 e5       	ldi	r24, 0x58	; 88
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	b7 01       	movw	r22, r14
    1e20:	0c c0       	rjmp	.+24     	; 0x1e3a <vfprintf+0x350>
    1e22:	83 2f       	mov	r24, r19
    1e24:	86 78       	andi	r24, 0x86	; 134
    1e26:	59 f0       	breq	.+22     	; 0x1e3e <vfprintf+0x354>
    1e28:	31 ff       	sbrs	r19, 1
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <vfprintf+0x346>
    1e2c:	8b e2       	ldi	r24, 0x2B	; 43
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <vfprintf+0x348>
    1e30:	80 e2       	ldi	r24, 0x20	; 32
    1e32:	37 fd       	sbrc	r19, 7
    1e34:	8d e2       	ldi	r24, 0x2D	; 45
    1e36:	b7 01       	movw	r22, r14
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <fputc>
    1e3e:	a5 14       	cp	r10, r5
    1e40:	38 f4       	brcc	.+14     	; 0x1e50 <vfprintf+0x366>
    1e42:	b7 01       	movw	r22, r14
    1e44:	80 e3       	ldi	r24, 0x30	; 48
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <fputc>
    1e4c:	5a 94       	dec	r5
    1e4e:	f7 cf       	rjmp	.-18     	; 0x1e3e <vfprintf+0x354>
    1e50:	aa 94       	dec	r10
    1e52:	f4 01       	movw	r30, r8
    1e54:	ea 0d       	add	r30, r10
    1e56:	f1 1d       	adc	r31, r1
    1e58:	80 81       	ld	r24, Z
    1e5a:	b7 01       	movw	r22, r14
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <fputc>
    1e62:	a1 10       	cpse	r10, r1
    1e64:	f5 cf       	rjmp	.-22     	; 0x1e50 <vfprintf+0x366>
    1e66:	33 20       	and	r3, r3
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <vfprintf+0x382>
    1e6a:	51 ce       	rjmp	.-862    	; 0x1b0e <vfprintf+0x24>
    1e6c:	b7 01       	movw	r22, r14
    1e6e:	80 e2       	ldi	r24, 0x20	; 32
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <fputc>
    1e76:	3a 94       	dec	r3
    1e78:	f6 cf       	rjmp	.-20     	; 0x1e66 <vfprintf+0x37c>
    1e7a:	f7 01       	movw	r30, r14
    1e7c:	86 81       	ldd	r24, Z+6	; 0x06
    1e7e:	97 81       	ldd	r25, Z+7	; 0x07
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <vfprintf+0x39c>
    1e82:	8f ef       	ldi	r24, 0xFF	; 255
    1e84:	9f ef       	ldi	r25, 0xFF	; 255
    1e86:	2c 96       	adiw	r28, 0x0c	; 12
    1e88:	e2 e1       	ldi	r30, 0x12	; 18
    1e8a:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__>

00001e8e <strnlen_P>:
    1e8e:	fc 01       	movw	r30, r24
    1e90:	05 90       	lpm	r0, Z+
    1e92:	61 50       	subi	r22, 0x01	; 1
    1e94:	70 40       	sbci	r23, 0x00	; 0
    1e96:	01 10       	cpse	r0, r1
    1e98:	d8 f7       	brcc	.-10     	; 0x1e90 <strnlen_P+0x2>
    1e9a:	80 95       	com	r24
    1e9c:	90 95       	com	r25
    1e9e:	8e 0f       	add	r24, r30
    1ea0:	9f 1f       	adc	r25, r31
    1ea2:	08 95       	ret

00001ea4 <strnlen>:
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	61 50       	subi	r22, 0x01	; 1
    1ea8:	70 40       	sbci	r23, 0x00	; 0
    1eaa:	01 90       	ld	r0, Z+
    1eac:	01 10       	cpse	r0, r1
    1eae:	d8 f7       	brcc	.-10     	; 0x1ea6 <strnlen+0x2>
    1eb0:	80 95       	com	r24
    1eb2:	90 95       	com	r25
    1eb4:	8e 0f       	add	r24, r30
    1eb6:	9f 1f       	adc	r25, r31
    1eb8:	08 95       	ret

00001eba <fputc>:
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	fb 01       	movw	r30, r22
    1ec4:	23 81       	ldd	r18, Z+3	; 0x03
    1ec6:	21 fd       	sbrc	r18, 1
    1ec8:	03 c0       	rjmp	.+6      	; 0x1ed0 <fputc+0x16>
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	9f ef       	ldi	r25, 0xFF	; 255
    1ece:	28 c0       	rjmp	.+80     	; 0x1f20 <fputc+0x66>
    1ed0:	22 ff       	sbrs	r18, 2
    1ed2:	16 c0       	rjmp	.+44     	; 0x1f00 <fputc+0x46>
    1ed4:	46 81       	ldd	r20, Z+6	; 0x06
    1ed6:	57 81       	ldd	r21, Z+7	; 0x07
    1ed8:	24 81       	ldd	r18, Z+4	; 0x04
    1eda:	35 81       	ldd	r19, Z+5	; 0x05
    1edc:	42 17       	cp	r20, r18
    1ede:	53 07       	cpc	r21, r19
    1ee0:	44 f4       	brge	.+16     	; 0x1ef2 <fputc+0x38>
    1ee2:	a0 81       	ld	r26, Z
    1ee4:	b1 81       	ldd	r27, Z+1	; 0x01
    1ee6:	9d 01       	movw	r18, r26
    1ee8:	2f 5f       	subi	r18, 0xFF	; 255
    1eea:	3f 4f       	sbci	r19, 0xFF	; 255
    1eec:	31 83       	std	Z+1, r19	; 0x01
    1eee:	20 83       	st	Z, r18
    1ef0:	8c 93       	st	X, r24
    1ef2:	26 81       	ldd	r18, Z+6	; 0x06
    1ef4:	37 81       	ldd	r19, Z+7	; 0x07
    1ef6:	2f 5f       	subi	r18, 0xFF	; 255
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	37 83       	std	Z+7, r19	; 0x07
    1efc:	26 83       	std	Z+6, r18	; 0x06
    1efe:	10 c0       	rjmp	.+32     	; 0x1f20 <fputc+0x66>
    1f00:	eb 01       	movw	r28, r22
    1f02:	09 2f       	mov	r16, r25
    1f04:	18 2f       	mov	r17, r24
    1f06:	00 84       	ldd	r0, Z+8	; 0x08
    1f08:	f1 85       	ldd	r31, Z+9	; 0x09
    1f0a:	e0 2d       	mov	r30, r0
    1f0c:	09 95       	icall
    1f0e:	89 2b       	or	r24, r25
    1f10:	e1 f6       	brne	.-72     	; 0x1eca <fputc+0x10>
    1f12:	8e 81       	ldd	r24, Y+6	; 0x06
    1f14:	9f 81       	ldd	r25, Y+7	; 0x07
    1f16:	01 96       	adiw	r24, 0x01	; 1
    1f18:	9f 83       	std	Y+7, r25	; 0x07
    1f1a:	8e 83       	std	Y+6, r24	; 0x06
    1f1c:	81 2f       	mov	r24, r17
    1f1e:	90 2f       	mov	r25, r16
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	08 95       	ret

00001f2a <__ultoa_invert>:
    1f2a:	fa 01       	movw	r30, r20
    1f2c:	aa 27       	eor	r26, r26
    1f2e:	28 30       	cpi	r18, 0x08	; 8
    1f30:	51 f1       	breq	.+84     	; 0x1f86 <__ultoa_invert+0x5c>
    1f32:	20 31       	cpi	r18, 0x10	; 16
    1f34:	81 f1       	breq	.+96     	; 0x1f96 <__ultoa_invert+0x6c>
    1f36:	e8 94       	clt
    1f38:	6f 93       	push	r22
    1f3a:	6e 7f       	andi	r22, 0xFE	; 254
    1f3c:	6e 5f       	subi	r22, 0xFE	; 254
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	8f 4f       	sbci	r24, 0xFF	; 255
    1f42:	9f 4f       	sbci	r25, 0xFF	; 255
    1f44:	af 4f       	sbci	r26, 0xFF	; 255
    1f46:	b1 e0       	ldi	r27, 0x01	; 1
    1f48:	3e d0       	rcall	.+124    	; 0x1fc6 <__ultoa_invert+0x9c>
    1f4a:	b4 e0       	ldi	r27, 0x04	; 4
    1f4c:	3c d0       	rcall	.+120    	; 0x1fc6 <__ultoa_invert+0x9c>
    1f4e:	67 0f       	add	r22, r23
    1f50:	78 1f       	adc	r23, r24
    1f52:	89 1f       	adc	r24, r25
    1f54:	9a 1f       	adc	r25, r26
    1f56:	a1 1d       	adc	r26, r1
    1f58:	68 0f       	add	r22, r24
    1f5a:	79 1f       	adc	r23, r25
    1f5c:	8a 1f       	adc	r24, r26
    1f5e:	91 1d       	adc	r25, r1
    1f60:	a1 1d       	adc	r26, r1
    1f62:	6a 0f       	add	r22, r26
    1f64:	71 1d       	adc	r23, r1
    1f66:	81 1d       	adc	r24, r1
    1f68:	91 1d       	adc	r25, r1
    1f6a:	a1 1d       	adc	r26, r1
    1f6c:	20 d0       	rcall	.+64     	; 0x1fae <__ultoa_invert+0x84>
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <__ultoa_invert+0x48>
    1f70:	68 94       	set
    1f72:	3f 91       	pop	r19
    1f74:	2a e0       	ldi	r18, 0x0A	; 10
    1f76:	26 9f       	mul	r18, r22
    1f78:	11 24       	eor	r1, r1
    1f7a:	30 19       	sub	r19, r0
    1f7c:	30 5d       	subi	r19, 0xD0	; 208
    1f7e:	31 93       	st	Z+, r19
    1f80:	de f6       	brtc	.-74     	; 0x1f38 <__ultoa_invert+0xe>
    1f82:	cf 01       	movw	r24, r30
    1f84:	08 95       	ret
    1f86:	46 2f       	mov	r20, r22
    1f88:	47 70       	andi	r20, 0x07	; 7
    1f8a:	40 5d       	subi	r20, 0xD0	; 208
    1f8c:	41 93       	st	Z+, r20
    1f8e:	b3 e0       	ldi	r27, 0x03	; 3
    1f90:	0f d0       	rcall	.+30     	; 0x1fb0 <__ultoa_invert+0x86>
    1f92:	c9 f7       	brne	.-14     	; 0x1f86 <__ultoa_invert+0x5c>
    1f94:	f6 cf       	rjmp	.-20     	; 0x1f82 <__ultoa_invert+0x58>
    1f96:	46 2f       	mov	r20, r22
    1f98:	4f 70       	andi	r20, 0x0F	; 15
    1f9a:	40 5d       	subi	r20, 0xD0	; 208
    1f9c:	4a 33       	cpi	r20, 0x3A	; 58
    1f9e:	18 f0       	brcs	.+6      	; 0x1fa6 <__ultoa_invert+0x7c>
    1fa0:	49 5d       	subi	r20, 0xD9	; 217
    1fa2:	31 fd       	sbrc	r19, 1
    1fa4:	40 52       	subi	r20, 0x20	; 32
    1fa6:	41 93       	st	Z+, r20
    1fa8:	02 d0       	rcall	.+4      	; 0x1fae <__ultoa_invert+0x84>
    1faa:	a9 f7       	brne	.-22     	; 0x1f96 <__ultoa_invert+0x6c>
    1fac:	ea cf       	rjmp	.-44     	; 0x1f82 <__ultoa_invert+0x58>
    1fae:	b4 e0       	ldi	r27, 0x04	; 4
    1fb0:	a6 95       	lsr	r26
    1fb2:	97 95       	ror	r25
    1fb4:	87 95       	ror	r24
    1fb6:	77 95       	ror	r23
    1fb8:	67 95       	ror	r22
    1fba:	ba 95       	dec	r27
    1fbc:	c9 f7       	brne	.-14     	; 0x1fb0 <__ultoa_invert+0x86>
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	61 05       	cpc	r22, r1
    1fc2:	71 05       	cpc	r23, r1
    1fc4:	08 95       	ret
    1fc6:	9b 01       	movw	r18, r22
    1fc8:	ac 01       	movw	r20, r24
    1fca:	0a 2e       	mov	r0, r26
    1fcc:	06 94       	lsr	r0
    1fce:	57 95       	ror	r21
    1fd0:	47 95       	ror	r20
    1fd2:	37 95       	ror	r19
    1fd4:	27 95       	ror	r18
    1fd6:	ba 95       	dec	r27
    1fd8:	c9 f7       	brne	.-14     	; 0x1fcc <__ultoa_invert+0xa2>
    1fda:	62 0f       	add	r22, r18
    1fdc:	73 1f       	adc	r23, r19
    1fde:	84 1f       	adc	r24, r20
    1fe0:	95 1f       	adc	r25, r21
    1fe2:	a0 1d       	adc	r26, r0
    1fe4:	08 95       	ret

00001fe6 <__prologue_saves__>:
    1fe6:	2f 92       	push	r2
    1fe8:	3f 92       	push	r3
    1fea:	4f 92       	push	r4
    1fec:	5f 92       	push	r5
    1fee:	6f 92       	push	r6
    1ff0:	7f 92       	push	r7
    1ff2:	8f 92       	push	r8
    1ff4:	9f 92       	push	r9
    1ff6:	af 92       	push	r10
    1ff8:	bf 92       	push	r11
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	ca 1b       	sub	r28, r26
    2010:	db 0b       	sbc	r29, r27
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	09 94       	ijmp

0000201e <__epilogue_restores__>:
    201e:	2a 88       	ldd	r2, Y+18	; 0x12
    2020:	39 88       	ldd	r3, Y+17	; 0x11
    2022:	48 88       	ldd	r4, Y+16	; 0x10
    2024:	5f 84       	ldd	r5, Y+15	; 0x0f
    2026:	6e 84       	ldd	r6, Y+14	; 0x0e
    2028:	7d 84       	ldd	r7, Y+13	; 0x0d
    202a:	8c 84       	ldd	r8, Y+12	; 0x0c
    202c:	9b 84       	ldd	r9, Y+11	; 0x0b
    202e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2030:	b9 84       	ldd	r11, Y+9	; 0x09
    2032:	c8 84       	ldd	r12, Y+8	; 0x08
    2034:	df 80       	ldd	r13, Y+7	; 0x07
    2036:	ee 80       	ldd	r14, Y+6	; 0x06
    2038:	fd 80       	ldd	r15, Y+5	; 0x05
    203a:	0c 81       	ldd	r16, Y+4	; 0x04
    203c:	1b 81       	ldd	r17, Y+3	; 0x03
    203e:	aa 81       	ldd	r26, Y+2	; 0x02
    2040:	b9 81       	ldd	r27, Y+1	; 0x01
    2042:	ce 0f       	add	r28, r30
    2044:	d1 1d       	adc	r29, r1
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	ed 01       	movw	r28, r26
    2052:	08 95       	ret

00002054 <_exit>:
    2054:	f8 94       	cli

00002056 <__stop_program>:
    2056:	ff cf       	rjmp	.-2      	; 0x2056 <__stop_program>
